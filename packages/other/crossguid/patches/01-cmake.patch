diff --git a/CMakeLists.txt b/CMakeLists.txt
new file mode 100644
index 0000000..ba0562f
--- /dev/null
+++ b/CMakeLists.txt
@@ -0,0 +1,20 @@
+project (crossguid)
+
+cmake_minimum_required (VERSION 2.4)
+
+set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${PROJECT_SOURCE_DIR})
+
+enable_language(CXX)
+
+add_definitions ("-std=c++11")
+
+if (${CMAKE_SYSTEM_NAME} MATCHES "Linux")
+    set (GUIDOperatingSystem "Linux")
+    find_package(LibUUID)
+    add_definitions ("-DGUID_LIBUUID")
+endif (${CMAKE_SYSTEM_NAME} MATCHES "Linux")
+
+add_library ("crossguid" STATIC "guid.cpp")
+
+INSTALL(TARGETS "crossguid" DESTINATION "lib")
+INSTALL(FILES "guid.h" DESTINATION include)
diff --git a/FindLibUUID.cmake b/FindLibUUID.cmake
new file mode 100644
index 0000000..9619a18
--- /dev/null
+++ b/FindLibUUID.cmake
@@ -0,0 +1,43 @@
+find_package(PkgConfig)
+
+pkg_check_modules(PKG_LIBUUID QUIET uuid)
+
+set(LIBUUID_DEFINITIONS ${PKG_LIBUUID_CFLAGS_OTHER})
+set(LIBUUID_VERSION ${PKG_LIBUUID_VERSION})
+
+find_path(LIBUUID_INCLUDE_DIR
+    NAMES uuid/uuid.h
+    HINTS ${PKG_LIBUUID_INCLUDE_DIRS}
+)
+find_library(LIBUUID_LIBRARY
+    NAMES uuid
+    HINTS ${PKG_LIBUUID_LIBRARY_DIRS}
+)
+
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(LibUUID
+    FOUND_VAR
+        LIBUUID_FOUND
+    REQUIRED_VARS
+        LIBUUID_LIBRARY
+        LIBUUID_INCLUDE_DIR
+    VERSION_VAR
+        LIBUUID_VERSION
+)
+
+if(LIBUUID_FOUND AND NOT TARGET LibUUID::UUID)
+    add_library(LibUUID::UUID UNKNOWN IMPORTED)
+    set_target_properties(LibUUID::UUID PROPERTIES
+        IMPORTED_LOCATION "${LIBUUID_LIBRARY}"
+        INTERFACE_COMPILE_OPTIONS "${LIBUUID_DEFINITIONS}"
+        INTERFACE_INCLUDE_DIRECTORIES "${LIBUUID_INCLUDE_DIR}"
+    )
+endif()
+
+mark_as_advanced(LIBUUID_INCLUDE_DIR LIBUUID_LIBRARY)
+
+include(FeatureSummary)
+set_package_properties(LIBUUID PROPERTIES
+    URL "http://www.kernel.org/pub/linux/utils/util-linux/"
+    DESCRIPTION "uuid library in util-linux"
+)
