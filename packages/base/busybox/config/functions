################################################################################
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
################################################################################

showcursor() {
  echo -en "\033[?25h"
  echo 2>/dev/null 1 > /sys/devices/virtual/graphics/fbcon/cursor_blink
}

# Hide frame-buffer cursor
hidecursor() {
  echo -en "\033[?25l"
  echo 2>/dev/null 0 > /sys/devices/virtual/graphics/fbcon/cursor_blink
}

# Start a progress meter
# $1: spinner, percent, countdown
# $2: message to display
# [spinner]
#   $3: optional command to execute
#   $4: optional success completion message (nothing if not specified)
#   $5: optional failure completion message ($4 if not specified)
# [percent]
#   $3: name of filename to be progress monitored
#   $4: terminal size (in bytes) of $3 when progress is complete
#   $5: optional command to execute
#   $6: optional success message (100% if not specified)
#   $7: optional failure message ($6 if not specified)
# [countdown]
#   $3: number of seconds to start counting down from
#   $4: optional completion message, default is nothing
start_progress() {
  local cmdresult=0
  echo > /dev/.progress.run

  cmdresult=1
  case "$1" in
    spinner)
      progresstask_spinner "$2" &
      if [ -n "$3" ]; then
        eval "$3"
        cmdresult=$?
        [ $cmdresult -eq 0 ] && stop_progress "$4" || stop_progress "${5:-$4}"
      fi
      ;;
    percent)
      progresstask_percent "$2" "$3" $4 &
      if [ -n "$5" ]; then
        eval "$5"
        cmdresult="$?"
        [ $cmdresult -eq 0 ] && stop_progress "$6" || stop_progress "${7:-$6}"
      fi
      ;;
    countdown)
      progresstask_countdown "$2" $3 "$4"
      ;;
  esac

  return $cmdresult
}

stop_progress() {
  echo "$1" > /dev/.progress.stop

  while [ -f /dev/.progress.run ]; do
    usleep 250000
  done

  rm -f /dev/.progress.stop
  return 0
}

progresstask_spinner() {
  local msg="$1"
  local spinner="|/-\\|/-\\"
  local count=0 donemsg
  rm -f /dev/.progress.stop

  echo -n "${msg} "
  while [ ! -f /dev/.progress.stop ]; do
    echo -en "\b${spinner:$count:1}"
    usleep 500000
    count=$(((count + 1) % 8))
  done
  donemsg="$(cat /dev/.progress.stop)"
  echo -e "\b${donemsg:-done}"

  rm -f /dev/.progress.run
  exit 0
}

progresstask_percent() {
  local msg="$1" filename="$2" fsize=$3 csize donemsg
  rm -f /dev/.progress.stop

  echo -n "${msg}    "
  while [ ! -f /dev/.progress.stop ]; do
    [ -f ${filename} ] && csize=$(stat -t "${filename}" | cut -d" " -f2) || csize=0
    printf "\b\b\b\b%3d%%" $(($csize * 100 / $fsize))
    usleep 250000
  done
  donemsg="$(cat /dev/.progress.stop)"
  echo -e "\b\b\b\b${donemsg:-100%}"

  rm -f /dev/.progress.run
  exit 0
}

progresstask_countdown() {
  local msg="$1" countfrom=$2 donemsg="$3"
  rm -f /dev/.progress.stop

  echo -n "${msg}  "
  while [ ${countfrom} -gt 0 ]; do
    printf "\b\b%2d" ${countfrom}
    sleep 1
    countfrom=$((countfrom - 1))
  done
  echo -e "\b\b${donemsg:-done}"

  rm -f /dev/.progress.run
  return 0
}
