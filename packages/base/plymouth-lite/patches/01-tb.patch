From 0879f69a0a0cac39759f7cb0342d1da3642c524f Mon Sep 17 00:00:00 2001
From: Stefan Saraev <stefan@saraev.ca>
Date: Wed, 6 Apr 2016 20:06:22 +0300
Subject: [PATCH] tb

---
 ply-frame-buffer.c | 35 -----------------------------------
 ply-frame-buffer.h | 35 +++++++++++++++++++++++++++++++++++
 ply-image.c        |  5 ++++-
 3 files changed, 39 insertions(+), 36 deletions(-)

diff --git a/ply-frame-buffer.c b/ply-frame-buffer.c
index 85caf7f..1fb8f77 100644
--- a/ply-frame-buffer.c
+++ b/ply-frame-buffer.c
@@ -47,41 +47,6 @@
 #define PLY_FRAME_BUFFER_DEFAULT_FB_DEVICE_NAME "/dev/fb0"
 #endif
 
-struct _ply_frame_buffer
-{
-  char *device_name;
-  int   device_fd;
-
-  char *map_address;
-  size_t size;
-
-  uint32_t *shadow_buffer;
-
-  uint32_t red_bit_position;
-  uint32_t green_bit_position;
-  uint32_t blue_bit_position;
-  uint32_t alpha_bit_position;
-
-  uint32_t bits_for_red;
-  uint32_t bits_for_green;
-  uint32_t bits_for_blue;
-  uint32_t bits_for_alpha;
-
-  int32_t dither_red;
-  int32_t dither_green;
-  int32_t dither_blue;
-
-  unsigned int bytes_per_pixel;
-  unsigned int row_stride;
-
-  ply_frame_buffer_area_t area;
-  ply_frame_buffer_area_t area_to_flush;
-
-  void (*flush)(ply_frame_buffer_t *buffer);
-
-  int pause_count;
-};
-
 static bool ply_frame_buffer_open_device (ply_frame_buffer_t  *buffer);
 static void ply_frame_buffer_close_device (ply_frame_buffer_t *buffer);
 static bool ply_frame_buffer_query_device (ply_frame_buffer_t *buffer);
diff --git a/ply-frame-buffer.h b/ply-frame-buffer.h
index d30e4ef..8ae71df 100644
--- a/ply-frame-buffer.h
+++ b/ply-frame-buffer.h
@@ -38,6 +38,41 @@ struct _ply_frame_buffer_area
   unsigned long height;
 };
 
+struct _ply_frame_buffer
+{
+  char *device_name;
+  int   device_fd;
+
+  char *map_address;
+  size_t size;
+
+  uint32_t *shadow_buffer;
+
+  uint32_t red_bit_position;
+  uint32_t green_bit_position;
+  uint32_t blue_bit_position;
+  uint32_t alpha_bit_position;
+
+  uint32_t bits_for_red;
+  uint32_t bits_for_green;
+  uint32_t bits_for_blue;
+  uint32_t bits_for_alpha;
+
+  int32_t dither_red;
+  int32_t dither_green;
+  int32_t dither_blue;
+
+  unsigned int bytes_per_pixel;
+  unsigned int row_stride;
+
+  ply_frame_buffer_area_t area;
+  ply_frame_buffer_area_t area_to_flush;
+
+  void (*flush)(ply_frame_buffer_t *buffer);
+
+  int pause_count;
+};
+
 #define PLY_FRAME_BUFFER_COLOR_TO_PIXEL_VALUE(r,g,b,a)                        \
     (((uint8_t) (CLAMP (a * 255.0, 0.0, 255.0)) << 24)                        \
       | ((uint8_t) (CLAMP (r * 255.0, 0.0, 255.0)) << 16)                     \
diff --git a/ply-image.c b/ply-image.c
index cfe91a9..c5e6b3a 100644
--- a/ply-image.c
+++ b/ply-image.c
@@ -43,6 +43,7 @@
 #include <png.h>
 
 #include <linux/fb.h>
+#include "ply-frame-buffer.h"
 
 #define MIN(a,b) ((a) <= (b)? (a) : (b))
 #define MAX(a,b) ((a) >= (b)? (a) : (b))
@@ -220,7 +221,7 @@ ply_image_load (ply_image_t *image)
     png_set_palette_to_rgb (png);
 
   if ((color_type == PNG_COLOR_TYPE_GRAY) && (bits_per_pixel < 8))
-    png_set_gray_1_2_4_to_8 (png);
+    png_set_expand_gray_1_2_4_to_8 (png);
 
   if (png_get_valid (png, info, PNG_INFO_tRNS))
     png_set_tRNS_to_alpha (png);
@@ -464,6 +465,8 @@ main (int    argc,
       return exit_code;
     }
 
+  image = ply_image_resize(image, buffer->area.width, buffer->area.height);
+
   animate_at_time (buffer, image);
 
   ply_frame_buffer_close (buffer);
-- 
2.1.4

