From 5c36293e6db1b33c3cbe2d82c2664d522b35ae23 Mon Sep 17 00:00:00 2001
From: Stefan Saraev <stefan@saraev.ca>
Date: Mon, 2 Mar 2015 23:50:40 +0200
Subject: [PATCH 01/14] [tb] make binary addons executable

---
 xbmc/addons/Addon.cpp | 26 ++++++++++++++++++++++++++
 1 file changed, 26 insertions(+)

diff --git a/xbmc/addons/Addon.cpp b/xbmc/addons/Addon.cpp
index 5005f8d..acfb24a 100644
--- a/xbmc/addons/Addon.cpp
+++ b/xbmc/addons/Addon.cpp
@@ -50,6 +50,10 @@
 #include "freebsd/FreeBSDGNUReplacements.h"
 #endif
 
+#include <iostream>
+#include <dirent.h>
+#include <sys/stat.h>
+
 using XFILE::CDirectory;
 using XFILE::CFile;
 
@@ -399,6 +403,28 @@ void OnPostInstall(const AddonPtr& addon, bool update, bool modal)
   if (CAddonMgr::GetInstance().GetAddon(addon->ID(), localAddon, ADDON_REPOSITORY))
     CRepositoryUpdater::GetInstance().ScheduleUpdate(); //notify updater there is a new addon or version
 
+  // OE: make binary addons executable, creddits to vpeter4
+  std::string addonDirPath;
+  std::string chmodFilePath;
+  DIR *addonsDir;
+  struct dirent *fileDirent;
+  struct stat fileStat;
+  int statRet;
+
+  addonDirPath = "/storage/.kodi/addons/" + addon->ID() + "/bin/";
+  if ((addonsDir = opendir(addonDirPath.c_str())) != NULL)
+  {
+    while ((fileDirent = readdir(addonsDir)) != NULL)
+    {
+      chmodFilePath = addonDirPath + fileDirent->d_name;
+      statRet = stat(chmodFilePath.c_str(), &fileStat);
+      if (statRet == 0 && (fileStat.st_mode & S_IFMT) != S_IFDIR)
+        chmod(chmodFilePath.c_str(), fileStat.st_mode | S_IXUSR | S_IXGRP | S_IXOTH);
+    }
+    closedir(addonsDir);
+  }
+  // OE
+
   addon->OnPostInstall(update, modal);
 }
 
-- 
2.7.4


From ffabd336f1c70c5037df11a58fd7d62a01b60d7e Mon Sep 17 00:00:00 2001
From: Stefan Saraev <stefan@saraev.ca>
Date: Sat, 18 Apr 2015 14:59:29 +0300
Subject: [PATCH 02/14] [tb] disable minimize

---
 xbmc/Application.cpp | 1 -
 1 file changed, 1 deletion(-)

diff --git a/xbmc/Application.cpp b/xbmc/Application.cpp
index bc67d7c..463921f 100644
--- a/xbmc/Application.cpp
+++ b/xbmc/Application.cpp
@@ -4872,7 +4872,6 @@ bool CApplication::SwitchToFullScreen(bool force /* = false */)
 
 void CApplication::Minimize()
 {
-  g_Windowing.Minimize();
 }
 
 std::string CApplication::GetCurrentPlayer()
-- 
2.7.4


From 391b2391097345233818b9eb73dab04370c5b7b4 Mon Sep 17 00:00:00 2001
From: Stefan Saraev <stefan@saraev.ca>
Date: Mon, 18 Aug 2014 17:46:54 +0300
Subject: [PATCH 03/14] [tb] setup timezone

---
 xbmc/linux/LinuxTimezone.cpp | 12 ++++++++++++
 1 file changed, 12 insertions(+)

diff --git a/xbmc/linux/LinuxTimezone.cpp b/xbmc/linux/LinuxTimezone.cpp
index ea44d40..b780e62 100644
--- a/xbmc/linux/LinuxTimezone.cpp
+++ b/xbmc/linux/LinuxTimezone.cpp
@@ -42,6 +42,8 @@
 
 #include <algorithm>
 
+#include <fstream>
+
 CLinuxTimezone::CLinuxTimezone() : m_IsDST(0)
 {
    char* line = NULL;
@@ -159,6 +161,16 @@ void CLinuxTimezone::OnSettingChanged(const CSetting *setting)
   const std::string &settingId = setting->GetId();
   if (settingId == CSettings::SETTING_LOCALE_TIMEZONE)
   {
+    std::ofstream out("/storage/.cache/timezone");
+    if (out)
+    {
+      const std::string tz = std::string("TIMEZONE=") + ((CSettingString*)setting)->GetValue().c_str();
+      out << tz << std::endl;
+      out.flush();
+      out.close();
+      system("systemctl restart tz-data.service");
+    }
+
     SetTimezone(((CSettingString*)setting)->GetValue());
 
     CDateTime::ResetTimezoneBias();
-- 
2.7.4


From 7c44073606f5f8cfff41ed4e6bf5b679fbad1faf Mon Sep 17 00:00:00 2001
From: Stefan Saraev <stefan@saraev.ca>
Date: Fri, 24 Apr 2015 19:45:20 +0300
Subject: [PATCH 04/14] [tb] use a wrapper to setup systemd services

---
 xbmc/addons/Addon.cpp | 30 ++++++++++++++++++++++++++++++
 xbmc/addons/Addon.h   |  1 +
 2 files changed, 31 insertions(+)

diff --git a/xbmc/addons/Addon.cpp b/xbmc/addons/Addon.cpp
index acfb24a..0470bd1 100644
--- a/xbmc/addons/Addon.cpp
+++ b/xbmc/addons/Addon.cpp
@@ -343,6 +343,13 @@ AddonVersion CAddon::GetDependencyVersion(const std::string &dependencyID) const
   return AddonVersion("0.0.0");
 }
 
+void CallOEWrapper(const std::string& ID, bool disable)
+{
+  char cmd[255];
+  snprintf(cmd, sizeof(cmd), "/usr/lib/openelec/systemd-addon-wrapper %s %d %d", ID.c_str(), disable);
+  system(cmd);
+}
+
 void OnEnabled(const std::string& id)
 {
   // If the addon is a special, call enabled handler
@@ -351,6 +358,11 @@ void OnEnabled(const std::string& id)
       CAddonMgr::GetInstance().GetAddon(id, addon, ADDON_ADSPDLL))
     return addon->OnEnabled();
 
+  // OE: systemctl enable & start on addon enable
+  if (CAddonMgr::GetInstance().GetAddon(id, addon, ADDON_SERVICE))
+    CallOEWrapper(addon->ID(), false);
+  // OE
+
   if (CAddonMgr::GetInstance().GetAddon(id, addon, ADDON_SERVICE))
     std::static_pointer_cast<CService>(addon)->Start();
 
@@ -371,6 +383,11 @@ void OnDisabled(const std::string& id)
   if (CAddonMgr::GetInstance().GetAddon(id, addon, ADDON_SERVICE, false))
     std::static_pointer_cast<CService>(addon)->Stop();
 
+  // OE: systemctl stop & disable on addon disable
+  if (CAddonMgr::GetInstance().GetAddon(id, addon, ADDON_SERVICE, false))
+    CallOEWrapper(addon->ID(), true);
+  // OE
+
   if (CAddonMgr::GetInstance().GetAddon(id, addon, ADDON_CONTEXT_ITEM, false))
     CContextMenuManager::GetInstance().Unregister(std::static_pointer_cast<CContextMenuAddon>(addon));
 }
@@ -394,6 +411,14 @@ void OnPreInstall(const AddonPtr& addon)
 void OnPostInstall(const AddonPtr& addon, bool update, bool modal)
 {
   AddonPtr localAddon;
+  // OE: systemctl stop & disable / enable & start on addon upgrade
+  if (CAddonMgr::GetInstance().GetAddon(addon->ID(), localAddon, ADDON_SERVICE))
+  {
+    CallOEWrapper(addon->ID(), true);
+    CallOEWrapper(addon->ID(), false);
+  }
+  // OE
+
   if (CAddonMgr::GetInstance().GetAddon(addon->ID(), localAddon, ADDON_SERVICE))
     std::static_pointer_cast<CService>(localAddon)->Start();
 
@@ -431,6 +456,11 @@ void OnPostInstall(const AddonPtr& addon, bool update, bool modal)
 void OnPreUnInstall(const AddonPtr& addon)
 {
   AddonPtr localAddon;
+  // OE: systemctl stop & disable on addon ininstall
+  if (CAddonMgr::GetInstance().GetAddon(addon->ID(), localAddon, ADDON_SERVICE))
+    CallOEWrapper(addon->ID(), true);
+  // OE
+
   if (CAddonMgr::GetInstance().GetAddon(addon->ID(), localAddon, ADDON_SERVICE))
     std::static_pointer_cast<CService>(localAddon)->Stop();
 
diff --git a/xbmc/addons/Addon.h b/xbmc/addons/Addon.h
index d43b309..2c51fb3 100644
--- a/xbmc/addons/Addon.h
+++ b/xbmc/addons/Addon.h
@@ -148,6 +148,7 @@ public:
   std::string GetSetting(const std::string& key) override;
 
   TiXmlElement* GetSettingsXML() override;
+  void CallOEWrapper(const std::string& ID, bool disable);
 
   /*! \brief get the required version of a dependency.
    \param dependencyID the addon ID of the dependency.
-- 
2.7.4


From e99964ba3129cad6015aa99928e64b3bc7392b0a Mon Sep 17 00:00:00 2001
From: Stefan Saraev <stefan@saraev.ca>
Date: Mon, 15 Dec 2014 21:28:54 +0200
Subject: [PATCH 05/14] [tb] handle SIGTERM

... CApplication::Stop cant be trusted
---
 xbmc/Application.cpp         | 17 ++++++++++++-----
 xbmc/Application.h           |  1 +
 xbmc/XBApplicationEx.cpp     |  1 +
 xbmc/XBApplicationEx.h       |  1 +
 xbmc/platform/posix/main.cpp | 15 +++++++++++++++
 5 files changed, 30 insertions(+), 5 deletions(-)

diff --git a/xbmc/Application.cpp b/xbmc/Application.cpp
index 463921f..eab83f5 100644
--- a/xbmc/Application.cpp
+++ b/xbmc/Application.cpp
@@ -2344,12 +2344,12 @@ void CApplication::OnApplicationMessage(ThreadMessage* pMsg)
   switch (pMsg->dwMessage)
   {
   case TMSG_POWERDOWN:
-    Stop(EXITCODE_POWERDOWN);
+    SetExitCode(EXITCODE_POWERDOWN);
     g_powerManager.Powerdown();
     break;
 
   case TMSG_QUIT:
-    Stop(EXITCODE_QUIT);
+    SetExitCode(EXITCODE_QUIT);
     break;
   
   case TMSG_SHUTDOWN:
@@ -2370,12 +2370,13 @@ void CApplication::OnApplicationMessage(ThreadMessage* pMsg)
 
   case TMSG_RESTART:
   case TMSG_RESET:
-    Stop(EXITCODE_REBOOT);
+    SetExitCode(EXITCODE_REBOOT);
     g_powerManager.Reboot();
     break;
 
   case TMSG_RESTARTAPP:
 #if defined(TARGET_WINDOWS) || defined(TARGET_LINUX)
+    SetExitCode(EXITCODE_RESTARTAPP);
     Stop(EXITCODE_RESTARTAPP);
 #endif
     break;
@@ -2769,12 +2770,19 @@ bool CApplication::Cleanup()
   }
 }
 
+void CApplication::SetExitCode(int exitCode)
+{
+  // save it for CEC
+  m_ExitCode = exitCode;
+  m_ExitCodeSet = true;
+}
+
 void CApplication::Stop(int exitCode)
 {
   try
   {
     CVariant vExitCode(CVariant::VariantTypeObject);
-    vExitCode["exitcode"] = exitCode;
+    vExitCode["exitcode"] = m_ExitCode;
     CAnnouncementManager::GetInstance().Announce(System, "xbmc", "OnQuit", vExitCode);
 
     // Abort any active screensaver
@@ -2801,7 +2809,6 @@ void CApplication::Stop(int exitCode)
 
     m_bStop = true;
     m_AppFocused = false;
-    m_ExitCode = exitCode;
     CLog::Log(LOGNOTICE, "stop all");
 
     // cancel any jobs from the jobmanager
diff --git a/xbmc/Application.h b/xbmc/Application.h
index 5fed501..0647d66 100644
--- a/xbmc/Application.h
+++ b/xbmc/Application.h
@@ -152,6 +152,7 @@ public:
 
   void StopPVRManager();
   bool IsCurrentThread() const;
+  void SetExitCode(int exitCode);
   void Stop(int exitCode);
   void RestartApp();
   void UnloadSkin(bool forReload = false);
diff --git a/xbmc/XBApplicationEx.cpp b/xbmc/XBApplicationEx.cpp
index f6fffd8..4583b41 100644
--- a/xbmc/XBApplicationEx.cpp
+++ b/xbmc/XBApplicationEx.cpp
@@ -43,6 +43,7 @@ CXBApplicationEx::CXBApplicationEx()
   m_bStop = false;
   m_AppFocused = true;
   m_ExitCode = EXITCODE_QUIT;
+  m_ExitCodeSet = false;
   m_renderGUI = false;
 }
 
diff --git a/xbmc/XBApplicationEx.h b/xbmc/XBApplicationEx.h
index c46cba1..ed3f35f 100644
--- a/xbmc/XBApplicationEx.h
+++ b/xbmc/XBApplicationEx.h
@@ -40,6 +40,7 @@ public:
   // Variables for timing
   bool m_bStop;
   int  m_ExitCode;
+  bool m_ExitCodeSet;
   bool m_AppFocused;
   bool m_renderGUI;
 
diff --git a/xbmc/platform/posix/main.cpp b/xbmc/platform/posix/main.cpp
index b6b7035..9e7309b 100644
--- a/xbmc/platform/posix/main.cpp
+++ b/xbmc/platform/posix/main.cpp
@@ -41,12 +41,27 @@
 #include "input/linux/LIRC.h"
 #endif
 #include "platform/XbmcContext.h"
+#include "Application.h"
+
+void xbmc_term_handler(int signum)
+{
+  CLog::Log(LOGINFO, "Received SIGTERM...");
+  if (!g_application.m_ExitCodeSet)
+    g_application.SetExitCode(EXITCODE_RESTARTAPP);
+  g_application.Stop(EXITCODE_RESTARTAPP);
+}
 
 #ifdef __cplusplus
 extern "C"
 #endif
 int main(int argc, char* argv[])
 {
+  // SIGTERM handler
+  struct sigaction action;
+  memset(&action, 0, sizeof(struct sigaction));
+  action.sa_handler = xbmc_term_handler;
+  sigaction(SIGTERM, &action, NULL);
+
   // set up some xbmc specific relationships
   XBMC::Context context;
 
-- 
2.7.4


From 4c73d39f5413d83c989330b13a190e0c6daa15b6 Mon Sep 17 00:00:00 2001
From: Stefan Saraev <stefan@saraev.ca>
Date: Sun, 27 Mar 2016 15:06:13 +0300
Subject: [PATCH 06/14] [tb] all user pre-installed addons should be enabled

---
 xbmc/addons/AddonDatabase.cpp | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/xbmc/addons/AddonDatabase.cpp b/xbmc/addons/AddonDatabase.cpp
index 7c062f0..2a26509 100644
--- a/xbmc/addons/AddonDatabase.cpp
+++ b/xbmc/addons/AddonDatabase.cpp
@@ -241,7 +241,7 @@ void CAddonDatabase::SyncInstalled(const std::set<std::string>& ids, const std::
     BeginTransaction();
     for (const auto& id : added)
       m_pDS->exec(PrepareSQL("INSERT INTO installed(addonID, enabled, installDate) "
-          "VALUES('%s', 0, '%s')", id.c_str(), now.c_str()));
+          "VALUES('%s', 1, '%s')", id.c_str(), now.c_str()));
 
     for (const auto& id : removed)
       m_pDS->exec(PrepareSQL("DELETE FROM installed WHERE addonID='%s'", id.c_str()));
-- 
2.7.4


From ad9c6c168df54652525cb117118459b6bdbc99e9 Mon Sep 17 00:00:00 2001
From: Stefan Saraev <stefan@saraev.ca>
Date: Sat, 26 Sep 2015 00:32:42 +0300
Subject: [PATCH 07/14] [tb] pvr: nobody cared

---
 xbmc/pvr/channels/PVRChannel.cpp | 5 +----
 1 file changed, 1 insertion(+), 4 deletions(-)

diff --git a/xbmc/pvr/channels/PVRChannel.cpp b/xbmc/pvr/channels/PVRChannel.cpp
index b084263..6e26067 100644
--- a/xbmc/pvr/channels/PVRChannel.cpp
+++ b/xbmc/pvr/channels/PVRChannel.cpp
@@ -220,10 +220,7 @@ bool CPVRChannel::Persist()
 
   if (CPVRDatabase *database = GetPVRDatabase())
   {
-    bool bReturn = database->Persist(*this) && database->CommitInsertQueries();
-    CSingleLock lock(m_critSection);
-    m_bChanged = !bReturn;
-    return bReturn;
+    // meh
   }
 
   return false;
-- 
2.7.4


From 5395cf7e4104e5a6e0e0ab9cd159b39dd187e421 Mon Sep 17 00:00:00 2001
From: Alex Deryskyba <alex@codesnake.com>
Date: Sat, 20 Sep 2014 04:43:52 +0300
Subject: [PATCH 08/14] [aml] Fill audio packets completely when resampling to
 prevent 'audio data unaligned' kernel warnings

---
 xbmc/cores/AudioEngine/Engines/ActiveAE/ActiveAEBuffer.cpp | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/xbmc/cores/AudioEngine/Engines/ActiveAE/ActiveAEBuffer.cpp b/xbmc/cores/AudioEngine/Engines/ActiveAE/ActiveAEBuffer.cpp
index ff26118..9de73fa 100644
--- a/xbmc/cores/AudioEngine/Engines/ActiveAE/ActiveAEBuffer.cpp
+++ b/xbmc/cores/AudioEngine/Engines/ActiveAE/ActiveAEBuffer.cpp
@@ -159,7 +159,11 @@ CActiveAEBufferPoolResample::CActiveAEBufferPoolResample(AEAudioFormat inputForm
     m_inputFormat.m_channelLayout += AE_CH_FC;
   }
   m_resampler = NULL;
+#ifdef HAS_LIBAMCODEC
+  m_fillPackets = true;
+#else
   m_fillPackets = false;
+#endif
   m_drain = false;
   m_empty = true;
   m_procSample = NULL;
-- 
2.7.4


From 6b3dcf245bfff6d074c38e5793181a6a4f7ad661 Mon Sep 17 00:00:00 2001
From: Alex Deryskyba <alex@codesnake.com>
Date: Tue, 30 Jun 2015 11:19:57 +0200
Subject: [PATCH 09/14] [aml] Ugly workaround to show DTS/AC3 caps

... but don't run into multi channel issues as we can only open 2 pcm channels
---
 xbmc/cores/AudioEngine/Sinks/AESinkALSA.cpp | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/xbmc/cores/AudioEngine/Sinks/AESinkALSA.cpp b/xbmc/cores/AudioEngine/Sinks/AESinkALSA.cpp
index 95db8cf..c842dd2 100644
--- a/xbmc/cores/AudioEngine/Sinks/AESinkALSA.cpp
+++ b/xbmc/cores/AudioEngine/Sinks/AESinkALSA.cpp
@@ -1301,6 +1301,12 @@ void CAESinkALSA::EnumerateDevicesEx(AEDeviceInfoList &list, bool force)
 
 AEDeviceType CAESinkALSA::AEDeviceTypeFromName(const std::string &name)
 {
+#ifdef HAS_LIBAMCODEC
+  // ugly workaround to show DTS / AC3 caps
+  // but don't run into multi channel issues
+  // as we can only open 2 pcm channels
+  return AE_DEVTYPE_IEC958;
+#endif
   if (name.substr(0, 4) == "hdmi")
     return AE_DEVTYPE_HDMI;
   else if (name.substr(0, 6) == "iec958" || name.substr(0, 5) == "spdif")
-- 
2.7.4


From c8608d0aae11e72bd6c807c634fc47a6bb7459c8 Mon Sep 17 00:00:00 2001
From: Stefan Saraev <stefan@saraev.ca>
Date: Sat, 7 Nov 2015 16:24:58 +0200
Subject: [PATCH 10/14] [aml] fix compiler badness when compiling with amcodec

---
 xbmc/cores/VideoPlayer/DVDCodecs/Video/Makefile.in | 2 --
 1 file changed, 2 deletions(-)

diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/Makefile.in b/xbmc/cores/VideoPlayer/DVDCodecs/Video/Makefile.in
index a1a3447..1bf5a89 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/Makefile.in
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/Makefile.in
@@ -24,8 +24,6 @@ endif
 ifeq (@USE_LIBAMCODEC@,1)
 SRCS += AMLCodec.cpp
 SRCS += DVDVideoCodecAmlogic.cpp
-INCLUDES += -I$(prefix)/include/amcodec
-INCLUDES += -I$(prefix)/include/amplayer
 endif
 
 ifeq (@USE_ANDROID@,1)
-- 
2.7.4


From 5f55ca3576be773c8aa0337a6a3ecaf1bb657f80 Mon Sep 17 00:00:00 2001
From: Stefan Saraev <stefan@saraev.ca>
Date: Mon, 1 Feb 2016 21:19:58 +0200
Subject: [PATCH 11/14] [aml] prefer libamcodec.so

---
 xbmc/cores/VideoPlayer/DVDCodecs/Video/AMLCodec.cpp | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/AMLCodec.cpp b/xbmc/cores/VideoPlayer/DVDCodecs/Video/AMLCodec.cpp
index 0a97893..1fface4 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/AMLCodec.cpp
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/AMLCodec.cpp
@@ -101,7 +101,7 @@ public:
 class DllLibAmCodec : public DllDynamic, DllLibamCodecInterface
 {
   // libamcodec is static linked into libamplayer.so or libamcodec.so
-  DECLARE_DLL_WRAPPER(DllLibAmCodec, "libamplayer.so")
+  DECLARE_DLL_WRAPPER(DllLibAmCodec, "libamcodec.so")
 
   DEFINE_METHOD1(int, codec_init,               (codec_para_t *p1))
   DEFINE_METHOD1(int, codec_close,              (codec_para_t *p1))
@@ -1389,8 +1389,8 @@ CAMLCodec::CAMLCodec()
   m_dll = new DllLibAmCodec;
   if(!m_dll->Load())
   {
-    CLog::Log(LOGWARNING, "CAMLCodec::CAMLCodec libamplayer.so not found, trying libamcodec.so instead");
-    m_dll->SetFile("libamcodec.so");
+    CLog::Log(LOGWARNING, "CAMLCodec::CAMLCodec libamcodec.so not found, trying libamplayer.so instead");
+    m_dll->SetFile("libamplayer.so");
     m_dll->Load();
   }
   am_private->m_dll = m_dll;
-- 
2.7.4


From b4ce44ac734bc2b0845461b618edf12a03861243 Mon Sep 17 00:00:00 2001
From: Stefan Saraev <stefan@saraev.ca>
Date: Wed, 16 Mar 2016 22:43:07 +0200
Subject: [PATCH 12/14] [aml] re-add IVPClockCallback

---
 .../VideoPlayer/DVDCodecs/DVDFactoryCodec.cpp      |  4 +-
 xbmc/cores/VideoPlayer/DVDCodecs/DVDFactoryCodec.h |  3 +-
 .../cores/VideoPlayer/DVDCodecs/Video/AMLCodec.cpp | 58 +++++++++++++++++++---
 xbmc/cores/VideoPlayer/DVDCodecs/Video/AMLCodec.h  |  7 ++-
 .../DVDCodecs/Video/DVDVideoCodecAmlogic.cpp       |  5 +-
 .../DVDCodecs/Video/DVDVideoCodecAmlogic.h         |  5 +-
 .../VideoPlayer/Interfaces/IVPClockCallback.h      | 27 ++++++++++
 xbmc/cores/VideoPlayer/VideoPlayerVideo.cpp        | 10 +++-
 xbmc/cores/VideoPlayer/VideoPlayerVideo.h          |  6 ++-
 9 files changed, 109 insertions(+), 16 deletions(-)
 create mode 100644 xbmc/cores/VideoPlayer/Interfaces/IVPClockCallback.h

diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/DVDFactoryCodec.cpp b/xbmc/cores/VideoPlayer/DVDCodecs/DVDFactoryCodec.cpp
index 355257c..45947d9 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/DVDFactoryCodec.cpp
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/DVDFactoryCodec.cpp
@@ -126,7 +126,7 @@ CDVDOverlayCodec* CDVDFactoryCodec::OpenCodec(CDVDOverlayCodec* pCodec, CDVDStre
 }
 
 
-CDVDVideoCodec* CDVDFactoryCodec::CreateVideoCodec(CDVDStreamInfo &hint, CProcessInfo &processInfo, const CRenderInfo &info)
+CDVDVideoCodec* CDVDFactoryCodec::CreateVideoCodec(CDVDStreamInfo &hint, CProcessInfo &processInfo, const CRenderInfo &info, IVPClockCallback* clock)
 {
   CDVDVideoCodec* pCodec = nullptr;
   CDVDCodecOptions options;
@@ -143,7 +143,7 @@ CDVDVideoCodec* CDVDFactoryCodec::CreateVideoCodec(CDVDStreamInfo &hint, CProces
 #if defined(HAS_LIBAMCODEC)
     // Amlogic can be present on multiple platforms (Linux, Android)
     // try this first. if it does not open, we still try other hw decoders
-    pCodec = OpenCodec(new CDVDVideoCodecAmlogic(processInfo), hint, options);
+    pCodec = OpenCodec(new CDVDVideoCodecAmlogic(processInfo, clock), hint, options);
     if (pCodec)
       return pCodec;
 #endif
diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/DVDFactoryCodec.h b/xbmc/cores/VideoPlayer/DVDCodecs/DVDFactoryCodec.h
index 45e794b..06a5c0b 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/DVDFactoryCodec.h
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/DVDFactoryCodec.h
@@ -34,13 +34,14 @@ class CDVDStreamInfo;
 class CDVDCodecOption;
 class CDVDCodecOptions;
 
+class IVPClockCallback;
 
 class CDVDFactoryCodec
 {
 public:
   static CDVDVideoCodec* CreateVideoCodec(CDVDStreamInfo &hint,
                                           CProcessInfo &processInfo,
-                                          const CRenderInfo &info = CRenderInfo());
+                                          const CRenderInfo &info = CRenderInfo(), IVPClockCallback* clock = NULL);
   static CDVDAudioCodec* CreateAudioCodec(CDVDStreamInfo &hint, bool allowpassthrough = true, bool allowdtshddecode = true);
   static CDVDOverlayCodec* CreateOverlayCodec(CDVDStreamInfo &hint );
 
diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/AMLCodec.cpp b/xbmc/cores/VideoPlayer/DVDCodecs/Video/AMLCodec.cpp
index 1fface4..cb8087e 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/AMLCodec.cpp
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/AMLCodec.cpp
@@ -26,6 +26,7 @@
 #include "cores/VideoPlayer/DVDClock.h"
 #include "cores/VideoPlayer/VideoRenderers/RenderFlags.h"
 #include "cores/VideoPlayer/VideoRenderers/RenderManager.h"
+#include "cores/VideoPlayer/Interfaces/IVPClockCallback.h"
 #include "guilib/GraphicContext.h"
 #include "settings/DisplaySettings.h"
 #include "settings/MediaSettings.h"
@@ -1380,8 +1381,9 @@ int set_header_info(am_private_t *para)
 }
 
 /*************************************************************************/
-CAMLCodec::CAMLCodec()
+CAMLCodec::CAMLCodec(IVPClockCallback* clock)
   : CThread("CAMLCodec")
+  , m_clock(clock)
 {
   m_opened = false;
   am_private = new am_private_t;
@@ -1418,7 +1420,6 @@ bool CAMLCodec::OpenDecoder(CDVDStreamInfo &hints)
   m_speed = DVD_PLAYSPEED_NORMAL;
   m_1st_pts = 0;
   m_cur_pts = 0;
-  m_player_pts = 0;
   m_cur_pictcnt = 0;
   m_old_pictcnt = 0;
   m_dst_rect.SetRect(0, 0, 0, 0);
@@ -1728,7 +1729,6 @@ int CAMLCodec::Decode(uint8_t *pData, size_t iSize, double dts, double pts)
 
   if (pData)
   {
-    m_player_pts = pts;
     am_private->am_pkt.data = pData;
     am_private->am_pkt.data_size = iSize;
 
@@ -1817,12 +1817,10 @@ int CAMLCodec::Decode(uint8_t *pData, size_t iSize, double dts, double pts)
   // we must return VC_BUFFER or VC_PICTURE,
   // default to VC_BUFFER.
   int rtn = VC_BUFFER;
-  m_player_pts = DVD_NOPTS_VALUE;
   if (m_old_pictcnt != m_cur_pictcnt)
   {
     m_old_pictcnt++;
     rtn = VC_PICTURE;
-    m_player_pts = pts;
     // we got a new pict, try and keep hw buffered demux above 2 seconds.
     // this, combined with the above 1 second check, keeps hw buffered demux between 1 and 2 seconds.
     // we also check to make sure we keep from filling hw buffer.
@@ -1848,7 +1846,12 @@ bool CAMLCodec::GetPicture(DVDVideoPicture *pDvdVideoPicture)
 
   pDvdVideoPicture->dts = DVD_NOPTS_VALUE;
   if (m_speed == DVD_PLAYSPEED_NORMAL)
-    pDvdVideoPicture->pts = m_player_pts;
+  {
+    pDvdVideoPicture->pts = GetPlayerPtsSeconds() * (double)DVD_TIME_BASE;
+    // video pts cannot be late or VideoPlayer goes nuts,
+    // so run it one frame ahead
+    pDvdVideoPicture->pts += 1 * pDvdVideoPicture->iDuration;
+  }
   else
   {
     if (m_cur_pts == 0)
@@ -1957,6 +1960,38 @@ void CAMLCodec::Process()
         m_cur_pts = pts_video;
         m_cur_pictcnt++;
         m_ready_event.Set();
+        // correct video pts by starting pts.
+        if (m_start_pts != 0)
+          pts_video += m_start_pts;
+        else if (m_start_dts != 0)
+          pts_video += m_start_dts;
+
+        double app_pts = GetPlayerPtsSeconds();
+        // add in audio delay/display latency contribution
+        // FIXME: Replace Video latency?
+        double offset  = 0 - CMediaSettings::GetInstance().GetCurrentVideoSettings().m_AudioDelay;
+        // correct video pts by user set delay and rendering delay
+        app_pts += offset;
+
+        //CLog::Log(LOGDEBUG, "CAMLCodec::Process: app_pts(%f), pts_video/PTS_FREQ(%f)",
+        //  app_pts, (double)pts_video/PTS_FREQ);
+
+        double error = app_pts - (double)pts_video/PTS_FREQ;
+        double abs_error = fabs(error);
+        if (abs_error > 0)
+        {
+          //CLog::Log(LOGDEBUG, "CAMLCodec::Process pts diff = %f", error);
+          if (abs_error > 0.300)
+          {
+            // big error so try to reset pts_pcrscr
+            SetVideoPtsSeconds(app_pts);
+          }
+          else
+          {
+            // small error so try to avoid a frame jump
+            SetVideoPtsSeconds((double)pts_video/PTS_FREQ + error/4);
+          }
+        }
       }
     }
     else
@@ -1968,6 +2003,17 @@ void CAMLCodec::Process()
   CLog::Log(LOGDEBUG, "CAMLCodec::Process Stopped");
 }
 
+double CAMLCodec::GetPlayerPtsSeconds()
+{
+  double clock_pts = 0.0;
+  if (m_clock)
+    clock_pts = m_clock->GetInterpolatedClock() / DVD_TIME_BASE;
+  else
+    CLog::Log(LOGWARNING, "CAMLCodec::GetPlayerPtsSeconds: cannot get player clock");
+
+  return clock_pts;
+}
+
 void CAMLCodec::SetVideoPtsSeconds(const double pts)
 {
   //CLog::Log(LOGDEBUG, "CAMLCodec::SetVideoPtsSeconds: pts(%f)", pts);
diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/AMLCodec.h b/xbmc/cores/VideoPlayer/DVDCodecs/Video/AMLCodec.h
index 5b9ee4f..7ae18e7 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/AMLCodec.h
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/AMLCodec.h
@@ -30,10 +30,12 @@ typedef struct am_private_t am_private_t;
 
 class DllLibAmCodec;
 
+class IVPClockCallback;
+
 class CAMLCodec : public CThread
 {
 public:
-  CAMLCodec();
+  CAMLCodec(IVPClockCallback* clock);
   virtual ~CAMLCodec();
 
   bool          OpenDecoder(CDVDStreamInfo &hints);
@@ -52,6 +54,7 @@ protected:
   virtual void  Process();
 
 private:
+  double        GetPlayerPtsSeconds();
   void          SetVideoPtsSeconds(double pts);
   void          ShowMainVideo(const bool show);
   void          SetVideoZoom(const float zoom);
@@ -86,5 +89,5 @@ private:
   int              m_contrast;
   int              m_brightness;
 
-  double m_player_pts;
+  IVPClockCallback* m_clock;
 };
diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecAmlogic.cpp b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecAmlogic.cpp
index 543951b..702dd3c 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecAmlogic.cpp
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecAmlogic.cpp
@@ -39,7 +39,8 @@ typedef struct frame_queue {
   struct frame_queue *nextframe;
 } frame_queue;
 
-CDVDVideoCodecAmlogic::CDVDVideoCodecAmlogic(CProcessInfo &processInfo) : CDVDVideoCodec(processInfo),
+CDVDVideoCodecAmlogic::CDVDVideoCodecAmlogic(CProcessInfo &processInfo, IVPClockCallback* clock) : CDVDVideoCodec(processInfo),
+  m_clock(clock),
   m_Codec(NULL),
   m_pFormatName("amcodec"),
   m_last_pts(0.0),
@@ -180,7 +181,7 @@ bool CDVDVideoCodecAmlogic::Open(CDVDStreamInfo &hints, CDVDCodecOptions &option
   }
 
   m_aspect_ratio = m_hints.aspect;
-  m_Codec = new CAMLCodec();
+  m_Codec = new CAMLCodec(m_clock);
   if (!m_Codec)
   {
     CLog::Log(LOGERROR, "%s: Failed to create Amlogic Codec", __MODULE_NAME__);
diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecAmlogic.h b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecAmlogic.h
index b352641..155ff98 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecAmlogic.h
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecAmlogic.h
@@ -33,6 +33,8 @@ class CBitstreamConverter;
 
 class CDVDVideoCodecAmlogic;
 
+class IVPClockCallback;
+
 class CDVDAmlogicInfo
 {
 public:
@@ -58,7 +60,7 @@ class CDVDVideoCodecAmlogic : public CDVDVideoCodec
   friend class CDVDAmlogicInfo;
 
 public:
-  CDVDVideoCodecAmlogic(CProcessInfo &processInfo);
+  CDVDVideoCodecAmlogic(CProcessInfo &processInfo, IVPClockCallback* clock);
   virtual ~CDVDVideoCodecAmlogic();
 
   // Required overrides
@@ -80,6 +82,7 @@ protected:
   void            FrameRateTracking(uint8_t *pData, int iSize, double dts, double pts);
   void            RemoveInfo(CDVDAmlogicInfo* info);
 
+  IVPClockCallback* m_clock;
   CAMLCodec      *m_Codec;
   std::set<CDVDAmlogicInfo*> m_inflight;
   const char     *m_pFormatName;
diff --git a/xbmc/cores/VideoPlayer/Interfaces/IVPClockCallback.h b/xbmc/cores/VideoPlayer/Interfaces/IVPClockCallback.h
new file mode 100644
index 0000000..1a5b11e
--- /dev/null
+++ b/xbmc/cores/VideoPlayer/Interfaces/IVPClockCallback.h
@@ -0,0 +1,27 @@
+#pragma once
+
+/*
+ *      Copyright (C) 2015 Team Kodi
+ *      http://xbmc.org
+ *
+ *  This Program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2, or (at your option)
+ *  any later version.
+ *
+ *  This Program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with XBMC; see the file COPYING.  If not, see
+ *  <http://www.gnu.org/licenses/>.
+ *
+ */
+
+class IVPClockCallback
+{
+public:
+  virtual double GetInterpolatedClock() = 0;
+};
diff --git a/xbmc/cores/VideoPlayer/VideoPlayerVideo.cpp b/xbmc/cores/VideoPlayer/VideoPlayerVideo.cpp
index 01e5d8c..c8907a5 100644
--- a/xbmc/cores/VideoPlayer/VideoPlayerVideo.cpp
+++ b/xbmc/cores/VideoPlayer/VideoPlayerVideo.cpp
@@ -127,7 +127,7 @@ bool CVideoPlayerVideo::OpenStream( CDVDStreamInfo &hint )
     return false;
 
   CLog::Log(LOGNOTICE, "Creating video codec with codec id: %i", hint.codec);
-  CDVDVideoCodec* codec = CDVDFactoryCodec::CreateVideoCodec(hint, m_processInfo, info);
+  CDVDVideoCodec* codec = CDVDFactoryCodec::CreateVideoCodec(hint, m_processInfo, info, this);
   if(!codec)
   {
     CLog::Log(LOGERROR, "Unsupported video codec");
@@ -1121,6 +1121,14 @@ int CVideoPlayerVideo::CalcDropRequirement(double pts)
   return result;
 }
 
+double CVideoPlayerVideo::GetInterpolatedClock()
+{
+  if(m_pClock)
+    return m_pClock->GetClock(true);
+  else
+    return 0.0;
+}
+
 void CDroppingStats::Reset()
 {
   m_gain.clear();
diff --git a/xbmc/cores/VideoPlayer/VideoPlayerVideo.h b/xbmc/cores/VideoPlayer/VideoPlayerVideo.h
index 36e8e76..1f67754 100644
--- a/xbmc/cores/VideoPlayer/VideoPlayerVideo.h
+++ b/xbmc/cores/VideoPlayer/VideoPlayerVideo.h
@@ -22,6 +22,7 @@
 
 #include "threads/Thread.h"
 #include "IVideoPlayer.h"
+#include "Interfaces/IVPClockCallback.h"
 #include "DVDMessageQueue.h"
 #include "DVDStreamInfo.h"
 #include "DVDCodecs/Video/DVDVideoCodec.h"
@@ -58,7 +59,7 @@ public:
   unsigned int m_dropRequests;
 };
 
-class CVideoPlayerVideo : public CThread, public IDVDStreamPlayerVideo
+class CVideoPlayerVideo : public CThread, public IDVDStreamPlayerVideo, public IVPClockCallback
 {
 public:
   CVideoPlayerVideo(CDVDClock* pClock
@@ -93,6 +94,9 @@ public:
   std::string GetStereoMode();
   void SetSpeed(int iSpeed);
 
+  // IVPClockCallback interface
+  virtual double GetInterpolatedClock();
+
   // classes
   CDVDOverlayContainer* m_pOverlayContainer;
   CDVDClock* m_pClock;
-- 
2.7.4


From f4c9175e11111319865ad3f0288a6bcab2d34bdc Mon Sep 17 00:00:00 2001
From: Stefan Saraev <stefan@saraev.ca>
Date: Wed, 16 Mar 2016 23:47:54 +0200
Subject: [PATCH 13/14] [aml] pvr can reopen too fast, slow us down a little

---
 xbmc/cores/VideoPlayer/DVDCodecs/Video/AMLCodec.cpp | 4 ++++
 1 file changed, 4 insertions(+)

diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/AMLCodec.cpp b/xbmc/cores/VideoPlayer/DVDCodecs/Video/AMLCodec.cpp
index cb8087e..f842130 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/AMLCodec.cpp
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/AMLCodec.cpp
@@ -1680,6 +1680,10 @@ void CAMLCodec::CloseDecoder()
   SysfsUtils::SetInt("/sys/class/tsync/enable", 1);
 
   ShowMainVideo(false);
+
+  // add a little delay after closing in case
+  // we are reopened too fast.
+  usleep(500 * 1000);
 }
 
 void CAMLCodec::Reset()
-- 
2.7.4


From 95c26283d9b6a0b64eb32ab4b6c9db1cb371bec3 Mon Sep 17 00:00:00 2001
From: Stefan Saraev <stefan@saraev.ca>
Date: Sun, 17 Jan 2016 15:15:47 +0200
Subject: [PATCH 14/14] [aml] TEMP: use software decoding for sd

---
 xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecAmlogic.cpp | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecAmlogic.cpp b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecAmlogic.cpp
index 702dd3c..1d66b85 100644
--- a/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecAmlogic.cpp
+++ b/xbmc/cores/VideoPlayer/DVDCodecs/Video/DVDVideoCodecAmlogic.cpp
@@ -82,8 +82,6 @@ bool CDVDVideoCodecAmlogic::Open(CDVDStreamInfo &hints, CDVDCodecOptions &option
     case AV_CODEC_ID_MJPEG:
       m_pFormatName = "am-mjpeg";
       break;
-    case AV_CODEC_ID_MPEG1VIDEO:
-    case AV_CODEC_ID_MPEG2VIDEO:
     case AV_CODEC_ID_MPEG2VIDEO_XVMC:
       m_mpeg2_sequence_pts = 0;
       m_mpeg2_sequence = new mpeg2_sequence;
@@ -123,6 +121,8 @@ bool CDVDVideoCodecAmlogic::Open(CDVDStreamInfo &hints, CDVDCodecOptions &option
     case AV_CODEC_ID_MPEG4:
     case AV_CODEC_ID_MSMPEG4V2:
     case AV_CODEC_ID_MSMPEG4V3:
+    case AV_CODEC_ID_MPEG1VIDEO:
+    case AV_CODEC_ID_MPEG2VIDEO:
       if (hints.width <= 800)
         return false;
       m_pFormatName = "am-mpeg4";
-- 
2.7.4

