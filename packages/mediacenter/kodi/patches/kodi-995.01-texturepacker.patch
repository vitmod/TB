From b8b3f750bf874423c10e74d19d12a07162d2419c Mon Sep 17 00:00:00 2001
From: Stefan Saraev <stefan@saraev.ca>
Date: Sun, 7 Feb 2016 18:56:28 +0200
Subject: [PATCH 1/6] [texturepacker] make disabling dxt/lzo actualy work.

---
 addons/skin.confluence/media/Makefile.in                 |  2 +-
 tools/depends/native/TexturePacker/src/TexturePacker.cpp | 15 +++++----------
 2 files changed, 6 insertions(+), 11 deletions(-)

diff --git a/addons/skin.confluence/media/Makefile.in b/addons/skin.confluence/media/Makefile.in
index a4a6312..00a24dc 100644
--- a/addons/skin.confluence/media/Makefile.in
+++ b/addons/skin.confluence/media/Makefile.in
@@ -10,7 +10,7 @@ all: $(TARGET)
 
 $(TARGET): $(IMAGES)
 ifeq (@ARCH@,arm)
-	@TEXTUREPACKER@ -dupecheck -use_none -input . -output $(TARGET)
+	@TEXTUREPACKER@ -dupecheck -disable_dxt -input . -output $(TARGET)
 else
 	@TEXTUREPACKER@ -dupecheck -input . -output $(TARGET)
 
diff --git a/tools/depends/native/TexturePacker/src/TexturePacker.cpp b/tools/depends/native/TexturePacker/src/TexturePacker.cpp
index de3d280..1179eea 100644
--- a/tools/depends/native/TexturePacker/src/TexturePacker.cpp
+++ b/tools/depends/native/TexturePacker/src/TexturePacker.cpp
@@ -287,9 +287,8 @@ void Usage()
   puts("  -input <dir>     Input directory. Default: current dir");
   puts("  -output <dir>    Output directory/filename. Default: Textures.xpr");
   puts("  -dupecheck       Enable duplicate file detection. Reduces output file size. Default: off");
-  puts("  -use_lzo         Use lz0 packing.     Default: on");
-  puts("  -use_dxt         Use DXT compression. Default: on");
-  puts("  -use_none        Use No  compression. Default: off");
+  puts("  -disable_lzo     Disable lz0 packing");
+  puts("  -disable_dxt     Disable DXT compression");
 }
 
 static bool checkDupe(struct MD5Context* ctx,
@@ -466,18 +465,14 @@ int main(int argc, char* argv[])
       while ((c = (char *)strchr(OutputFilename.c_str(), '\\')) != NULL) *c = '/';
 #endif
     }
-    else if (!platform_stricmp(args[i], "-use_none"))
+    else if (!platform_stricmp(args[i], "-disable_dxt"))
     {
       flags &= ~FLAGS_USE_DXT;
     }
-    else if (!platform_stricmp(args[i], "-use_dxt"))
-    {
-      flags |= FLAGS_USE_DXT;
-    }
 #ifdef USE_LZO_PACKING
-    else if (!platform_stricmp(args[i], "-use_lzo"))
+    else if (!platform_stricmp(args[i], "-disable_lzo"))
     {
-      flags |= FLAGS_USE_LZO;
+      flags &= ~FLAGS_USE_LZO;
     }
 #endif
     else
-- 
2.7.0


From 28b89b5e5b64296a33e7d14590bdad82dcc68ece Mon Sep 17 00:00:00 2001
From: Stefan Saraev <stefan@saraev.ca>
Date: Sun, 7 Feb 2016 21:42:37 +0200
Subject: [PATCH 2/6] [texturepacker] remove squish usage

---
 addons/skin.confluence/media/Makefile.in           |  5 --
 .../native/TexturePacker/src/TexturePacker.cpp     | 60 +---------------------
 2 files changed, 2 insertions(+), 63 deletions(-)

diff --git a/addons/skin.confluence/media/Makefile.in b/addons/skin.confluence/media/Makefile.in
index 00a24dc..0589d4b 100644
--- a/addons/skin.confluence/media/Makefile.in
+++ b/addons/skin.confluence/media/Makefile.in
@@ -9,13 +9,8 @@ all: $(TARGET)
 .PHONY: force
 
 $(TARGET): $(IMAGES)
-ifeq (@ARCH@,arm)
-	@TEXTUREPACKER@ -dupecheck -disable_dxt -input . -output $(TARGET)
-else
 	@TEXTUREPACKER@ -dupecheck -input . -output $(TARGET)
 
-endif
-
 clean:
 	rm -f $(TARGET)
 distclean: clean
diff --git a/tools/depends/native/TexturePacker/src/TexturePacker.cpp b/tools/depends/native/TexturePacker/src/TexturePacker.cpp
index 1179eea..76523de 100644
--- a/tools/depends/native/TexturePacker/src/TexturePacker.cpp
+++ b/tools/depends/native/TexturePacker/src/TexturePacker.cpp
@@ -39,7 +39,6 @@
 #include "XBTFWriter.h"
 #include "md5.h"
 #include "cmdlineargs.h"
-#include "squish.h"
 
 #ifdef TARGET_WINDOWS
 #define strncasecmp _strnicmp
@@ -196,12 +195,6 @@ CXBTFFrame appendContent(CXBTFWriter &writer, int width, int height, unsigned ch
   return frame;
 }
 
-void CompressImage(const squish::u8 *brga, int width, int height, squish::u8 *compressed, unsigned int flags, double &colorMSE, double &alphaMSE)
-{
-  squish::CompressImage(brga, width, height, compressed, flags | squish::kSourceBGRA);
-  squish::ComputeMSE(brga, width, height, compressed, flags | squish::kSourceBGRA, colorMSE, alphaMSE);
-}
-
 bool HasAlpha(unsigned char *argb, unsigned int width, unsigned int height)
 {
   unsigned char *p = argb + 3; // offset of alpha
@@ -219,63 +212,14 @@ CXBTFFrame createXBTFFrame(RGBAImage &image, CXBTFWriter& writer, double maxMSE,
   int width, height;
   unsigned int format = 0;
   unsigned char* argb = (unsigned char*)image.pixels;
-  unsigned int compressedSize = 0;
-  unsigned char* compressed = NULL;
   
   width  = image.width;
   height = image.height;
   bool hasAlpha = HasAlpha(argb, width, height);
 
-  if (flags & FLAGS_USE_DXT)
-  {
-    double colorMSE, alphaMSE;
-    compressedSize = squish::GetStorageRequirements(width, height, squish::kDxt5);
-    compressed = new unsigned char[compressedSize];
-    // first try DXT1, which is only 4bits/pixel
-    CompressImage(argb, width, height, compressed, squish::kDxt1, colorMSE, alphaMSE);
-    if (colorMSE < maxMSE && alphaMSE < maxMSE)
-    { // success - use it
-      compressedSize = squish::GetStorageRequirements(width, height, squish::kDxt1);
-      format = XB_FMT_DXT1;
-    }
-
-    if (!format)
-    { // try DXT3 and DXT5 - use whichever is better (color is the same, but alpha will be different)
-      CompressImage(argb, width, height, compressed, squish::kDxt3, colorMSE, alphaMSE);
-      if (colorMSE < maxMSE)
-      { // color is fine, test DXT5 as well
-        double dxt5MSE;
-        squish::u8* compressed2 = new squish::u8[squish::GetStorageRequirements(width, height, squish::kDxt5)];
-        CompressImage(argb, width, height, compressed2, squish::kDxt5, colorMSE, dxt5MSE);
-        if (alphaMSE < maxMSE && alphaMSE < dxt5MSE)
-        { // DXT3 passes and is best
-          compressedSize = squish::GetStorageRequirements(width, height, squish::kDxt3);
-          format = XB_FMT_DXT3;
-        }
-        else if (dxt5MSE < maxMSE)
-        { // DXT5 passes
-          compressedSize = squish::GetStorageRequirements(width, height, squish::kDxt5);
-          memcpy(compressed, compressed2, compressedSize);
-          format = XB_FMT_DXT5;
-        }
-        delete[] compressed2;
-      }
-    }
-  }
-
   CXBTFFrame frame; 
-  if (format)
-  {
-    frame = appendContent(writer, width, height, compressed, compressedSize, format, hasAlpha, flags);
-    if (compressedSize)
-      delete[] compressed;
-  }
-  else
-  {
-    // none of the compressed stuff works for us, so we use 32bit texture
-    format = XB_FMT_A8R8G8B8;
-    frame = appendContent(writer, width, height, argb, (width * height * 4), format, hasAlpha, flags);
-  }
+  format = XB_FMT_A8R8G8B8;
+  frame = appendContent(writer, width, height, argb, (width * height * 4), format, hasAlpha, flags);
 
   return frame;
 }
-- 
2.7.0


From 5a5b14ec36a80239a9ce923a25040b51bb480877 Mon Sep 17 00:00:00 2001
From: Stefan Saraev <stefan@saraev.ca>
Date: Sun, 7 Feb 2016 22:37:43 +0200
Subject: [PATCH 3/6] [texturepacker] configure: remove libsquish

---
 tools/depends/native/TexturePacker/src/configure.ac | 8 --------
 1 file changed, 8 deletions(-)

diff --git a/tools/depends/native/TexturePacker/src/configure.ac b/tools/depends/native/TexturePacker/src/configure.ac
index a3e9f1e..4b83b5e 100644
--- a/tools/depends/native/TexturePacker/src/configure.ac
+++ b/tools/depends/native/TexturePacker/src/configure.ac
@@ -34,14 +34,6 @@ AC_CHECK_LIB([jpeg],[main],, AC_MSG_ERROR("libjpeg not found"))
 AC_CHECK_HEADER([lzo/lzo1x.h],, AC_MSG_ERROR("lzo/lzo1x.h not found"))
 AC_CHECK_LIB([lzo2],[main],, AC_MSG_ERROR("liblzo2 not found"))
 
-# we don't compile with default upstream squish, so we use our own one
-# even on non unified deps platforms
-export PKG_CONFIG_PATH="${abs_top_srcdir}/../../libsquish-native/squish-install/lib/pkgconfig:$PKG_CONFIG_PATH"
-PKG_CHECK_MODULES([SQUISH], [squish],
- [CPPFLAGS="$CPPFLAGS $SQUISH_CFLAGS" LIBS="$LIBS $SQUISH_LIBS"],
- AC_MSG_ERROR("libsquish not found"))
-
-
 AC_SUBST(KODI_SRC_DIR)
 AC_SUBST(STATIC_FLAG)
 AC_SUBST(EXTRA_DEFINES)
-- 
2.7.0


From f7d8e532976c5015643a81cb5888caceebdfae90 Mon Sep 17 00:00:00 2001
From: Stefan Saraev <stefan@saraev.ca>
Date: Sun, 7 Feb 2016 22:02:38 +0200
Subject: [PATCH 4/6] [guilib] remove libsquish usage

---
 xbmc/guilib/DDSImage.cpp         | 86 +++-------------------------------------
 xbmc/guilib/DDSImage.h           | 21 ----------
 xbmc/guilib/Texture.cpp          | 38 +++++++-----------
 xbmc/guilib/TextureBundleXBT.cpp |  5 +--
 4 files changed, 23 insertions(+), 127 deletions(-)

diff --git a/xbmc/guilib/DDSImage.cpp b/xbmc/guilib/DDSImage.cpp
index c2fd215..f0f3218 100644
--- a/xbmc/guilib/DDSImage.cpp
+++ b/xbmc/guilib/DDSImage.cpp
@@ -21,7 +21,6 @@
 #include <algorithm>
 #include "DDSImage.h"
 #include "XBTF.h"
-#include <squish.h>
 #include "utils/log.h"
 #include <string.h>
 
@@ -120,12 +119,12 @@ bool CDDSImage::Create(const std::string &outputFile, unsigned int width, unsign
 {
   if (!brga)
     return false;
-  if (!Compress(width, height, pitch, brga, maxMSE))
-  { // use ARGB
-    Allocate(width, height, XB_FMT_A8R8G8B8);
-    for (unsigned int i = 0; i < height; i++)
-      memcpy(m_data + i * width * 4, brga + i * pitch, std::min(width * 4, pitch));
-  }
+
+  // use ARGB
+  Allocate(width, height, XB_FMT_A8R8G8B8);
+  for (unsigned int i = 0; i < height; i++)
+    memcpy(m_data + i * width * 4, brga + i * pitch, std::min(width * 4, pitch));
+
   return WriteFile(outputFile);
 }
 
@@ -158,79 +157,6 @@ unsigned int CDDSImage::GetStorageRequirements(unsigned int width, unsigned int
   }
 }
 
-bool CDDSImage::Compress(unsigned int width, unsigned int height, unsigned int pitch, unsigned char const *brga, double maxMSE)
-{
-  // first try DXT1, which is only 4bits/pixel
-  Allocate(width, height, XB_FMT_DXT1);
-
-  squish::CompressImage(brga, width, height, pitch, m_data, squish::kDxt1 | squish::kSourceBGRA);
-  const char *fourCC = NULL;
-
-  double colorMSE, alphaMSE;
-  squish::ComputeMSE(brga, width, height, pitch, m_data, squish::kDxt1 | squish::kSourceBGRA, colorMSE, alphaMSE);
-  if (!maxMSE || (colorMSE < maxMSE && alphaMSE < maxMSE))
-    fourCC = "DXT1";
-  else
-  {
-    if (alphaMSE == 0)
-    { // no alpha channel, so DXT5YCoCg is going to be the best DXT5 format
-      /*        squish::CompressImage(brga, width, height, pitch, data2, squish::kDxt5 | squish::kSourceBGRA);
-       squish::ComputeMSE(brga, width, height, pitch, m_data, squish::kDxt5 | squish::kSourceBGRA, colorMSE, alphaMSE);
-       if (colorMSE < maxMSE && alphaMSE < maxMSE)
-       { // success - use it
-       compressedSize = squish::GetStorageRequirements(width, height, squish::kDxt5);
-       format = XB_FMT_DXT5_YCoCg;
-       }
-       */
-    }
-    if (alphaMSE > 0)
-    { // try DXT3 and DXT5 - use whichever is better (color is the same as DXT1, but alpha will be different)
-      Allocate(width, height, XB_FMT_DXT3);
-      squish::CompressImage(brga, width, height, pitch, m_data, squish::kDxt3 | squish::kSourceBGRA);
-      squish::ComputeMSE(brga, width, height, pitch, m_data, squish::kDxt3 | squish::kSourceBGRA, colorMSE, alphaMSE);
-      if (colorMSE < maxMSE)
-      { // color is fine, test DXT5 as well
-        double dxt5MSE;
-        unsigned char *data2 = new unsigned char[GetStorageRequirements(width, height, XB_FMT_DXT5)];
-        squish::CompressImage(brga, width, height, pitch, data2, squish::kDxt5 | squish::kSourceBGRA);
-        squish::ComputeMSE(brga, width, height, pitch, data2, squish::kDxt5 | squish::kSourceBGRA, colorMSE, dxt5MSE);
-        if (alphaMSE < maxMSE && alphaMSE < dxt5MSE)
-          fourCC = "DXT3";
-        else if (dxt5MSE < maxMSE)
-        { // DXT5 passes
-          fourCC = "DXT5";
-          std::swap(m_data, data2);
-          alphaMSE = dxt5MSE;
-        }
-        delete[] data2;
-      }
-    }
-  }
-  if (fourCC)
-  {
-    memcpy(&m_desc.pixelFormat.fourcc, fourCC, 4);
-    CLog::Log(LOGDEBUG, "%s - using %s (min error is: %2.2f:%2.2f)", __FUNCTION__, fourCC, colorMSE, alphaMSE);
-    return true;
-  }
-  CLog::Log(LOGDEBUG, "%s - no format suitable (min error is: %2.2f:%2.2f)", __FUNCTION__, colorMSE, alphaMSE);
-  return false;
-}
-
-bool CDDSImage::Decompress(unsigned char *argb, unsigned int width, unsigned int height, unsigned int pitch, unsigned char const *dxt, unsigned int format)
-{
-  if (!argb || !dxt || !(format & XB_FMT_DXT_MASK))
-    return false;
-
-  if (format == XB_FMT_DXT1)
-    squish::DecompressImage(argb, width, height, pitch, dxt, squish::kDxt1 | squish::kSourceBGRA);
-  else if (format == XB_FMT_DXT3)
-    squish::DecompressImage(argb, width, height, pitch, dxt, squish::kDxt3 | squish::kSourceBGRA);
-  else if (format == XB_FMT_DXT5)
-    squish::DecompressImage(argb, width, height, pitch, dxt, squish::kDxt5 | squish::kSourceBGRA);
-
-  return true;
-}
-
 void CDDSImage::Allocate(unsigned int width, unsigned int height, unsigned int format)
 {
   memset(&m_desc, 0, sizeof(m_desc));
diff --git a/xbmc/guilib/DDSImage.h b/xbmc/guilib/DDSImage.h
index 3856ebe..3440c92 100644
--- a/xbmc/guilib/DDSImage.h
+++ b/xbmc/guilib/DDSImage.h
@@ -49,33 +49,12 @@ public:
    */
   bool Create(const std::string &file, unsigned int width, unsigned int height, unsigned int pitch, unsigned char const *argb, double maxMSE = 0);
   
-  /*! \brief Decompress a DXT1/3/5 image to the given buffer
-   Assumes the buffer has been allocated to at least width*height*4
-   \param argb pixel buffer to write to (at least width*height*4 bytes)
-   \param width width of the pixel buffer
-   \param height height of the pixel buffer
-   \param pitch pitch of the pixel buffer
-   \param dxt compressed dxt data
-   \param format format of the compressed dxt data
-   \return true on success, false otherwise
-   */
-  static bool Decompress(unsigned char *argb, unsigned int width, unsigned int height, unsigned int pitch, unsigned char const *dxt, unsigned int format);
 
 private:
   void Allocate(unsigned int width, unsigned int height, unsigned int format);
   static const char *GetFourCC(unsigned int format);
   bool WriteFile(const std::string &file) const;
 
-  /*! \brief Compress an ARGB buffer into a DXT1/3/5 image
-   \param width width of the pixel buffer
-   \param height height of the pixel buffer
-   \param pitch pitch of the pixel buffer
-   \param argb pixel buffer
-   \param maxMSE maximum mean square error to allow, ignored if 0 (the default)
-   \return true on successful compression within the given maxMSE, false otherwise
-   */
-  bool Compress(unsigned int width, unsigned int height, unsigned int pitch, unsigned char const *argb, double maxMSE = 0);
-
   static unsigned int GetStorageRequirements(unsigned int width, unsigned int height, unsigned int format);
   enum {
     ddsd_caps        = 0x00000001,
diff --git a/xbmc/guilib/Texture.cpp b/xbmc/guilib/Texture.cpp
index 6547502..a406706 100644
--- a/xbmc/guilib/Texture.cpp
+++ b/xbmc/guilib/Texture.cpp
@@ -111,32 +111,24 @@ void CBaseTexture::Update(unsigned int width, unsigned int height, unsigned int
   if (pixels == NULL)
     return;
 
-  if (format & XB_FMT_DXT_MASK && !g_Windowing.SupportsDXT())
-  { // compressed format that we don't support
-    Allocate(width, height, XB_FMT_A8R8G8B8);
-    CDDSImage::Decompress(m_pixels, std::min(width, m_textureWidth), std::min(height, m_textureHeight), GetPitch(m_textureWidth), pixels, format);
-  }
-  else
-  {
-    Allocate(width, height, format);
+  Allocate(width, height, format);
 
-    unsigned int srcPitch = pitch ? pitch : GetPitch(width);
-    unsigned int srcRows = GetRows(height);
-    unsigned int dstPitch = GetPitch(m_textureWidth);
-    unsigned int dstRows = GetRows(m_textureHeight);
+  unsigned int srcPitch = pitch ? pitch : GetPitch(width);
+  unsigned int srcRows = GetRows(height);
+  unsigned int dstPitch = GetPitch(m_textureWidth);
+  unsigned int dstRows = GetRows(m_textureHeight);
 
-    if (srcPitch == dstPitch)
-      memcpy(m_pixels, pixels, srcPitch * std::min(srcRows, dstRows));
-    else
+  if (srcPitch == dstPitch)
+    memcpy(m_pixels, pixels, srcPitch * std::min(srcRows, dstRows));
+  else
+  {
+    const unsigned char *src = pixels;
+    unsigned char* dst = m_pixels;
+    for (unsigned int y = 0; y < srcRows && y < dstRows; y++)
     {
-      const unsigned char *src = pixels;
-      unsigned char* dst = m_pixels;
-      for (unsigned int y = 0; y < srcRows && y < dstRows; y++)
-      {
-        memcpy(dst, src, std::min(srcPitch, dstPitch));
-        src += srcPitch;
-        dst += dstPitch;
-      }
+      memcpy(dst, src, std::min(srcPitch, dstPitch));
+      src += srcPitch;
+      dst += dstPitch;
     }
   }
   ClampToEdge();
diff --git a/xbmc/guilib/TextureBundleXBT.cpp b/xbmc/guilib/TextureBundleXBT.cpp
index 8a8f030..4c06ed3 100644
--- a/xbmc/guilib/TextureBundleXBT.cpp
+++ b/xbmc/guilib/TextureBundleXBT.cpp
@@ -18,7 +18,6 @@
  *
  */
 
-#include "squish.h"
 #include "system.h"
 #include "TextureBundleXBT.h"
 #include "Texture.h"
@@ -192,7 +191,7 @@ int CTextureBundleXBT::LoadAnim(const std::string& Filename, CBaseTexture*** ppT
 bool CTextureBundleXBT::ConvertFrameToTexture(const std::string& name, CXBTFFrame& frame, CBaseTexture** ppTexture)
 {
   // found texture - allocate the necessary buffers
-  squish::u8 *buffer = new squish::u8[(size_t)frame.GetPackedSize()];
+  unsigned char *buffer = new unsigned char [(size_t)frame.GetPackedSize()];
   if (buffer == NULL)
   {
     CLog::Log(LOGERROR, "Out of memory loading texture: %s (need %" PRIu64" bytes)", name.c_str(), frame.GetPackedSize());
@@ -210,7 +209,7 @@ bool CTextureBundleXBT::ConvertFrameToTexture(const std::string& name, CXBTFFram
   // check if it's packed with lzo
   if (frame.IsPacked())
   { // unpack
-    squish::u8 *unpacked = new squish::u8[(size_t)frame.GetUnpackedSize()];
+    unsigned char *unpacked = new unsigned char[(size_t)frame.GetUnpackedSize()];
     if (unpacked == NULL)
     {
       CLog::Log(LOGERROR, "Out of memory unpacking texture: %s (need %" PRIu64" bytes)", name.c_str(), frame.GetUnpackedSize());
-- 
2.7.0


From 9282637e0c92a145b88dfeb207690addfcf9ffbd Mon Sep 17 00:00:00 2001
From: Stefan Saraev <stefan@saraev.ca>
Date: Sun, 7 Feb 2016 22:03:26 +0200
Subject: [PATCH 5/6] [configure] remove squish dependency

---
 configure.ac | 10 ----------
 1 file changed, 10 deletions(-)

diff --git a/configure.ac b/configure.ac
index c217029..9a22b6c 100644
--- a/configure.ac
+++ b/configure.ac
@@ -1962,16 +1962,6 @@ else
   final_message="$final_message\n  Bluray:\tNo"
 fi
 
-# we don't compile with default upstream squish, so we use our own one
-# even on non unified deps platforms
-if test "$cross_compiling" != "yes"; then
-  make -C ${abs_top_srcdir}/tools/depends/native/libsquish-native CXX=${CXX}
-  export PKG_CONFIG_PATH="${abs_top_srcdir}/tools/depends/native/libsquish-native/squish-install/lib/pkgconfig:$PKG_CONFIG_PATH"
-fi
-PKG_CHECK_MODULES([SQUISH], [squish],
- [INCLUDES="$INCLUDES $SQUISH_CFLAGS" LIBS="$LIBS $SQUISH_LIBS"],
- AC_MSG_ERROR("squish not found"))
-
 if test "x$use_texturepacker" != "xno"; then
   AC_PATH_PROG([TEXTUREPACKER], [TexturePacker], ["none"],
     [$PATH$PATH_SEPARATOR${abs_top_srcdir}/tools/depends/native/TexturePacker/bin])
-- 
2.7.0


