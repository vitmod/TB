From f9a93462dfe77392ea89a7fffeaa4b608bdaea40 Mon Sep 17 00:00:00 2001
From: Stefan Saraev <stefan@saraev.ca>
Date: Thu, 4 Feb 2016 20:17:59 +0200
Subject: [PATCH] TEMP: revert PR9019

---
 xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemux.cpp    | 122 +++++
 xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemux.h      |  44 ++
 .../VideoPlayer/DVDDemuxers/DVDDemuxClient.cpp     | 607 ---------------------
 .../cores/VideoPlayer/DVDDemuxers/DVDDemuxClient.h |  63 ---
 .../VideoPlayer/DVDDemuxers/DVDDemuxPVRClient.cpp  | 517 ++++++++++++++++++
 .../VideoPlayer/DVDDemuxers/DVDDemuxPVRClient.h    | 118 ++++
 .../VideoPlayer/DVDDemuxers/DVDFactoryDemuxer.cpp  |  31 +-
 xbmc/cores/VideoPlayer/DVDDemuxers/Makefile.in     |   2 +-
 .../VideoPlayer/DVDInputStreams/DVDInputStream.h   |  20 +-
 .../DVDInputStreams/DVDInputStreamPVRManager.cpp   | 177 ------
 .../DVDInputStreams/DVDInputStreamPVRManager.h     |  29 +-
 11 files changed, 822 insertions(+), 908 deletions(-)
 delete mode 100644 xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemuxClient.cpp
 delete mode 100644 xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemuxClient.h
 create mode 100644 xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemuxPVRClient.cpp
 create mode 100644 xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemuxPVRClient.h

diff --git a/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemux.cpp b/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemux.cpp
index c0d9185..5008dc7 100644
--- a/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemux.cpp
+++ b/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemux.cpp
@@ -63,6 +63,32 @@ std::string CDemuxStreamAudio::GetStreamType()
   return sInfo;
 }
 
+int CDVDDemux::GetNrOfAudioStreams()
+{
+  int iCounter = 0;
+
+  for (int i = 0; i < GetNrOfStreams(); i++)
+  {
+    CDemuxStream* pStream = GetStream(i);
+    if (pStream->type == STREAM_AUDIO) iCounter++;
+  }
+
+  return iCounter;
+}
+
+int CDVDDemux::GetNrOfVideoStreams()
+{
+  int iCounter = 0;
+
+  for (int i = 0; i < GetNrOfStreams(); i++)
+  {
+    CDemuxStream* pStream = GetStream(i);
+    if (pStream->type == STREAM_VIDEO) iCounter++;
+  }
+
+  return iCounter;
+}
+
 int CDVDDemux::GetNrOfSubtitleStreams()
 {
   int iCounter = 0;
@@ -76,6 +102,102 @@ int CDVDDemux::GetNrOfSubtitleStreams()
   return iCounter;
 }
 
+int CDVDDemux::GetNrOfTeletextStreams()
+{
+  int iCounter = 0;
+
+  for (int i = 0; i < GetNrOfStreams(); i++)
+  {
+    CDemuxStream* pStream = GetStream(i);
+    if (pStream->type == STREAM_TELETEXT) iCounter++;
+  }
+
+  return iCounter;
+}
+
+const int CDVDDemux::GetNrOfRadioRDSStreams()
+{
+  int iCounter = 0;
+
+  for (int i = 0; i < GetNrOfStreams(); i++)
+  {
+    CDemuxStream* pStream = GetStream(i);
+    if (pStream->type == STREAM_RADIO_RDS) iCounter++;
+  }
+
+  return iCounter;
+}
+
+CDemuxStreamAudio* CDVDDemux::GetStreamFromAudioId(int iAudioIndex)
+{
+  int counter = -1;
+  for (int i = 0; i < GetNrOfStreams(); i++)
+  {
+    CDemuxStream* pStream = GetStream(i);
+
+    if (pStream->type == STREAM_AUDIO) counter++;
+    if (iAudioIndex == counter)
+      return (CDemuxStreamAudio*)pStream;
+  }
+  return NULL;
+}
+
+CDemuxStreamVideo* CDVDDemux::GetStreamFromVideoId(int iVideoIndex)
+{
+  int counter = -1;
+  for (int i = 0; i < GetNrOfStreams(); i++)
+  {
+    CDemuxStream* pStream = GetStream(i);
+
+    if (pStream->type == STREAM_VIDEO) counter++;
+    if (iVideoIndex == counter)
+      return (CDemuxStreamVideo*)pStream;
+  }
+  return NULL;
+}
+
+CDemuxStreamSubtitle* CDVDDemux::GetStreamFromSubtitleId(int iSubtitleIndex)
+{
+  int counter = -1;
+  for (int i = 0; i < GetNrOfStreams(); i++)
+  {
+    CDemuxStream* pStream = GetStream(i);
+
+    if (pStream->type == STREAM_SUBTITLE) counter++;
+    if (iSubtitleIndex == counter)
+      return (CDemuxStreamSubtitle*)pStream;
+  }
+  return NULL;
+}
+
+CDemuxStreamTeletext* CDVDDemux::GetStreamFromTeletextId(int iTeletextIndex)
+{
+  int counter = -1;
+  for (int i = 0; i < GetNrOfStreams(); i++)
+  {
+    CDemuxStream* pStream = GetStream(i);
+
+    if (pStream->type == STREAM_TELETEXT) counter++;
+    if (iTeletextIndex == counter)
+      return (CDemuxStreamTeletext*)pStream;
+  }
+  return NULL;
+}
+
+const CDemuxStreamRadioRDS* CDVDDemux::GetStreamFromRadioRDSId(int iRadioRDSIndex)
+{
+  int counter = -1;
+  for (int i = 0; i < GetNrOfStreams(); i++)
+  {
+    CDemuxStream* pStream = GetStream(i);
+
+    if (pStream->type == STREAM_RADIO_RDS) counter++;
+    if (iRadioRDSIndex == counter)
+      return (CDemuxStreamRadioRDS*)pStream;
+  }
+  return NULL;
+}
+
 std::string CDemuxStream::GetStreamName()
 {
   return "";
diff --git a/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemux.h b/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemux.h
index cff9d7e..d564c34 100644
--- a/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemux.h
+++ b/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemux.h
@@ -324,6 +324,15 @@ public:
    * returns opened filename
    */
   virtual std::string GetFileName() = 0;
+  /*
+   * return nr of audio streams, 0 if none
+   */
+  int GetNrOfAudioStreams();
+
+  /*
+   * return nr of video streams, 0 if none
+   */
+  int GetNrOfVideoStreams();
 
   /*
    * return nr of subtitle streams, 0 if none
@@ -331,6 +340,41 @@ public:
   int GetNrOfSubtitleStreams();
 
   /*
+   * return nr of teletext streams, 0 if none
+   */
+  int GetNrOfTeletextStreams();
+
+  /*
+   * return nr of rds streams, 0 if none
+   */
+  const int GetNrOfRadioRDSStreams();
+
+  /*
+   * return the audio stream, or NULL if it does not exist
+   */
+  CDemuxStreamAudio* GetStreamFromAudioId(int iAudioIndex);
+
+  /*
+   * return the video stream, or NULL if it does not exist
+   */
+  CDemuxStreamVideo* GetStreamFromVideoId(int iVideoIndex);
+
+  /*
+   * return the subtitle stream, or NULL if it does not exist
+   */
+  CDemuxStreamSubtitle* GetStreamFromSubtitleId(int iSubtitleIndex);
+
+  /*
+   * return the teletext stream, or NULL if it does not exist
+   */
+  CDemuxStreamTeletext* GetStreamFromTeletextId(int iTeletextIndex);
+
+  /*
+   * return the rds stream, or NULL if it does not exist
+   */
+  const CDemuxStreamRadioRDS* GetStreamFromRadioRDSId(int iRadioRDSIndex);
+
+  /*
    * return a user-presentable codec name of the given stream
    */
   virtual std::string GetStreamCodecName(int iStreamId) { return ""; };
diff --git a/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemuxClient.cpp b/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemuxClient.cpp
deleted file mode 100644
index 1a79895..0000000
--- a/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemuxClient.cpp
+++ /dev/null
@@ -1,607 +0,0 @@
-/*
- *      Copyright (C) 2012-2013 Team XBMC
- *      http://xbmc.org
- *
- *  This Program is free software; you can redistribute it and/or modify
- *  it under the terms of the GNU General Public License as published by
- *  the Free Software Foundation; either version 2, or (at your option)
- *  any later version.
- *
- *  This Program is distributed in the hope that it will be useful,
- *  but WITHOUT ANY WARRANTY; without even the implied warranty of
- *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- *  GNU General Public License for more details.
- *
- *  You should have received a copy of the GNU General Public License
- *  along with XBMC; see the file COPYING.  If not, see
- *  <http://www.gnu.org/licenses/>.
- *
- */
-
-#include "DVDInputStreams/DVDInputStream.h"
-#include "DVDDemuxClient.h"
-#include "DVDDemuxUtils.h"
-#include "utils/log.h"
-#include "settings/Settings.h"
-#include "../DVDClock.h"
-
-#define FF_MAX_EXTRADATA_SIZE ((1 << 28) - FF_INPUT_BUFFER_PADDING_SIZE)
-
-
-class CDemuxStreamClientInternal
-{
-public:
-  CDemuxStreamClientInternal()
-  : m_parser(nullptr)
-  , m_context(nullptr)
-  , m_parser_split(false)
-  {
-  }
-
-  ~CDemuxStreamClientInternal()
-  {
-    DisposeParser();
-  }
-
-  void DisposeParser()
-  {
-    if (m_parser)
-    {
-      av_parser_close(m_parser);
-      m_parser = nullptr;
-    }
-    if (m_context)
-    {
-      avcodec_close(m_context);
-      m_context = nullptr;
-    }
-  }
-
-  AVCodecParserContext *m_parser;
-  AVCodecContext *m_context;
-  bool m_parser_split;
-};
-
-class CDemuxStreamVideoClient
-: public CDemuxStreamVideo
-, public CDemuxStreamClientInternal
-{
-public:
-  CDemuxStreamVideoClient() {}
-  virtual std::string GetStreamInfo() override;
-};
-
-class CDemuxStreamAudioClient
-: public CDemuxStreamAudio
-, public CDemuxStreamClientInternal
-{
-public:
-  CDemuxStreamAudioClient() {}
-  virtual std::string GetStreamInfo() override;
-};
-
-class CDemuxStreamSubtitleClient
-: public CDemuxStreamSubtitle
-, public CDemuxStreamClientInternal
-{
-public:
-  CDemuxStreamSubtitleClient() {}
-  virtual std::string GetStreamInfo() override;
-};
-
-std::string CDemuxStreamVideoClient::GetStreamInfo()
-{
-  std::string strInfo;
-  switch (codec)
-  {
-    case AV_CODEC_ID_MPEG2VIDEO:
-      strInfo = "mpeg2video";
-      break;
-    case AV_CODEC_ID_H264:
-      strInfo = "h264";
-      break;
-    case AV_CODEC_ID_HEVC:
-      strInfo = "hevc";
-      break;
-    default:
-      break;
-  }
-
-  return strInfo;
-}
-
-std::string CDemuxStreamAudioClient::GetStreamInfo()
-{
-  std::string strInfo;
-  switch (codec)
-  {
-    case AV_CODEC_ID_AC3:
-      strInfo = "ac3";
-      break;
-    case AV_CODEC_ID_EAC3:
-      strInfo = "eac3";
-      break;
-    case AV_CODEC_ID_MP2:
-      strInfo = "mpeg2audio";
-      break;
-    case AV_CODEC_ID_AAC:
-      strInfo = "aac";
-      break;
-    case AV_CODEC_ID_DTS:
-      strInfo = "dts";
-      break;
-    default:
-      break;
-  }
-
-  return strInfo;
-}
-
-std::string CDemuxStreamSubtitleClient::GetStreamInfo()
-{
-  return "";
-}
-
-CDVDDemuxClient::CDVDDemuxClient() : CDVDDemux()
-{
-  m_pInput = nullptr;
-  m_IDemux = nullptr;
-  for (int i = 0; i < MAX_STREAMS; i++)
-    m_streams[i] = nullptr;
-}
-
-CDVDDemuxClient::~CDVDDemuxClient()
-{
-  Dispose();
-}
-
-bool CDVDDemuxClient::Open(CDVDInputStream* pInput)
-{
-  Abort();
-
-  m_pInput = pInput;
-  m_IDemux = dynamic_cast<CDVDInputStream::IDemux*>(m_pInput);
-  if (!m_IDemux)
-    return false;
-
-  return m_IDemux->OpenDemux();
-}
-
-void CDVDDemuxClient::Dispose()
-{
-  DisposeStreams();
-
-  m_pInput = nullptr;
-  m_IDemux = nullptr;
-}
-
-void CDVDDemuxClient::DisposeStream(int iStreamId)
-{
-  if (iStreamId < 0 || iStreamId >= MAX_STREAMS)
-    return;
-  delete m_streams[iStreamId];
-  m_streams[iStreamId] = nullptr;
-}
-
-void CDVDDemuxClient::DisposeStreams()
-{
-  for (int i=0; i< MAX_STREAMS; i++)
-    DisposeStream(i);
-}
-
-void CDVDDemuxClient::Reset()
-{
-  CDVDInputStream* pInputStream = m_pInput;
-  Dispose();
-  Open(pInputStream);
-}
-
-void CDVDDemuxClient::Abort()
-{
-  if (m_IDemux)
-    m_IDemux->AbortDemux();
-}
-
-void CDVDDemuxClient::Flush()
-{
-  if (m_IDemux)
-    m_IDemux->FlushDemux();
-}
-
-void CDVDDemuxClient::ParsePacket(DemuxPacket* pkt)
-{
-  CDemuxStream* st = m_streams[pkt->iStreamId];
-  if (st == nullptr)
-    return;
-
-  if (st->ExtraSize)
-    return;
-
-  CDemuxStreamClientInternal* stream = dynamic_cast<CDemuxStreamClientInternal*>(st);
-
-  if (stream == nullptr ||
-     stream->m_parser == nullptr)
-    return;
-
-  if (stream->m_context == nullptr)
-  {
-    AVCodec *codec = avcodec_find_decoder(st->codec);
-    if (codec == nullptr)
-    {
-      CLog::Log(LOGERROR, "%s - can't find decoder", __FUNCTION__);
-      stream->DisposeParser();
-      return;
-    }
-
-    stream->m_context = avcodec_alloc_context3(codec);
-    if (stream->m_context == nullptr)
-    {
-      CLog::Log(LOGERROR, "%s - can't allocate context", __FUNCTION__);
-      stream->DisposeParser();
-      return;
-    }
-    stream->m_context->time_base.num = 1;
-    stream->m_context->time_base.den = DVD_TIME_BASE;
-  }
-
-  if (stream->m_parser_split && stream->m_parser->parser->split)
-  {
-    int len = stream->m_parser->parser->split(stream->m_context, pkt->pData, pkt->iSize);
-    if (len > 0 && len < FF_MAX_EXTRADATA_SIZE)
-    {
-      if (st->ExtraData)
-        delete[] (uint8_t*)st->ExtraData;
-      st->changes++;
-      st->disabled = false;
-      st->ExtraSize = len;
-      st->ExtraData = new uint8_t[len+FF_INPUT_BUFFER_PADDING_SIZE];
-      memcpy(st->ExtraData, pkt->pData, len);
-      memset((uint8_t*)st->ExtraData + len, 0 , FF_INPUT_BUFFER_PADDING_SIZE);
-      stream->m_parser_split = false;
-    }
-  }
-
-
-  uint8_t *outbuf = nullptr;
-  int outbuf_size = 0;
-  int len = av_parser_parse2(stream->m_parser,
-                             stream->m_context, &outbuf, &outbuf_size,
-                             pkt->pData, pkt->iSize,
-                             (int64_t)(pkt->pts * DVD_TIME_BASE),
-                             (int64_t)(pkt->dts * DVD_TIME_BASE),
-                             0);
-  // our parse is setup to parse complete frames, so we don't care about outbufs
-  if(len >= 0)
-  {
-    if (stream->m_context->profile != st->profile &&
-        stream->m_context->profile != FF_PROFILE_UNKNOWN)
-    {
-      CLog::Log(LOGDEBUG, "CDVDDemuxClient::ParsePacket - {%d} profile changed from %d to %d", st->iId, st->profile, stream->m_context->profile);
-      st->profile = stream->m_context->profile;
-      st->changes++;
-      st->disabled = false;
-    }
-
-    if (stream->m_context->level != st->level &&
-        stream->m_context->level != FF_LEVEL_UNKNOWN)
-    {
-      CLog::Log(LOGDEBUG, "CDVDDemuxClient::ParsePacket - {%d} level changed from %d to %d", st->iId, st->level, stream->m_context->level);
-      st->level = stream->m_context->level;
-      st->changes++;
-      st->disabled = false;
-    }
-
-    switch (st->type)
-    {
-      case STREAM_AUDIO:
-      {
-        CDemuxStreamAudioClient* sta = static_cast<CDemuxStreamAudioClient*>(st);
-        if (stream->m_context->channels != sta->iChannels &&
-            stream->m_context->channels != 0)
-        {
-          CLog::Log(LOGDEBUG, "CDVDDemuxClient::ParsePacket - {%d} channels changed from %d to %d", st->iId, sta->iChannels, stream->m_context->channels);
-          sta->iChannels = stream->m_context->channels;
-          sta->changes++;
-          sta->disabled = false;
-        }
-        if (stream->m_context->sample_rate != sta->iSampleRate &&
-            stream->m_context->sample_rate != 0)
-        {
-          CLog::Log(LOGDEBUG, "CDVDDemuxClient::ParsePacket - {%d} samplerate changed from %d to %d", st->iId, sta->iSampleRate, stream->m_context->sample_rate);
-          sta->iSampleRate = stream->m_context->sample_rate;
-          sta->changes++;
-          sta->disabled = false;
-        }
-        break;
-      }
-      case STREAM_VIDEO:
-      {
-        CDemuxStreamVideoClient* stv = static_cast<CDemuxStreamVideoClient*>(st);
-        if (stream->m_context->width != stv->iWidth &&
-            stream->m_context->width != 0)
-        {
-          CLog::Log(LOGDEBUG, "CDVDDemuxClient::ParsePacket - {%d} width changed from %d to %d", st->iId, stv->iWidth, stream->m_context->width);
-          stv->iWidth = stream->m_context->width;
-          stv->changes++;
-          stv->disabled = false;
-        }
-        if (stream->m_context->height != stv->iHeight &&
-            stream->m_context->height != 0)
-        {
-          CLog::Log(LOGDEBUG, "CDVDDemuxClient::ParsePacket - {%d} height changed from %d to %d", st->iId, stv->iHeight, stream->m_context->height);
-          stv->iHeight = stream->m_context->height;
-          stv->changes++;
-          stv->disabled = false;
-        }
-        break;
-      }
-
-      default:
-        break;
-    }
-  }
-  else
-    CLog::Log(LOGDEBUG, "%s - parser returned error %d", __FUNCTION__, len);
-
-  return;
-}
-
-DemuxPacket* CDVDDemuxClient::Read()
-{
-  if (!m_IDemux)
-    return nullptr;
-
-  DemuxPacket* pPacket = m_IDemux->ReadDemux();
-  if (!pPacket)
-  {
-    return nullptr;
-  }
-
-  if (pPacket->iStreamId == DMX_SPECIALID_STREAMINFO)
-  {
-    RequestStreams();
-    CDVDDemuxUtils::FreeDemuxPacket(pPacket);
-    return CDVDDemuxUtils::AllocateDemuxPacket(0);
-  }
-  else if (pPacket->iStreamId == DMX_SPECIALID_STREAMCHANGE)
-  {
-    RequestStreams();
-  }
-  else if (pPacket->iStreamId >= 0 &&
-           pPacket->iStreamId < MAX_STREAMS &&
-           m_streams[pPacket->iStreamId])
-  {
-    ParsePacket(pPacket);
-  }
-
-  return pPacket;
-}
-
-CDemuxStream* CDVDDemuxClient::GetStream(int iStreamId)
-{
-  if (iStreamId < 0 || iStreamId >= MAX_STREAMS)
-    return nullptr;
-  return m_streams[iStreamId];
-}
-
-void CDVDDemuxClient::RequestStreams()
-{
-  int nbStreams = m_IDemux->GetNrOfStreams();
-
-  int i;
-  for (i = 0; i < nbStreams; ++i)
-  {
-    CDemuxStream *stream = m_IDemux->GetStream(i);
-    if (!stream)
-    {
-      CLog::Log(LOGERROR, "CDVDDemuxClient::RequestStreams - invalid stream at pos %d", i);
-      DisposeStreams();
-      return;
-    }
-
-    if (stream->type == STREAM_AUDIO)
-    {
-      CDemuxStreamAudio *source = dynamic_cast<CDemuxStreamAudio*>(stream);
-      if (!source)
-      {
-        CLog::Log(LOGERROR, "CDVDDemuxClient::RequestStreams - invalid audio stream at pos %d", i);
-        DisposeStreams();
-        return;
-      }
-      CDemuxStreamAudioClient* st = nullptr;
-      if (m_streams[i])
-      {
-        st = dynamic_cast<CDemuxStreamAudioClient*>(m_streams[i]);
-        if (!st || (st->codec != source->codec))
-          DisposeStream(i);
-      }
-      if (!m_streams[i])
-      {
-        st = new CDemuxStreamAudioClient();
-        st->m_parser = av_parser_init(source->codec);
-        if(st->m_parser)
-          st->m_parser->flags |= PARSER_FLAG_COMPLETE_FRAMES;
-      }
-      st->iChannels       = source->iChannels;
-      st->iSampleRate     = source->iSampleRate;
-      st->iBlockAlign     = source->iBlockAlign;
-      st->iBitRate        = source->iBitRate;
-      st->iBitsPerSample  = source->iBitsPerSample;
-      m_streams[i] = st;
-      st->m_parser_split = true;
-      st->changes++;
-    }
-    else if (stream->type == STREAM_VIDEO)
-    {
-      CDemuxStreamVideo *source = dynamic_cast<CDemuxStreamVideo*>(stream);
-      if (!source)
-      {
-        CLog::Log(LOGERROR, "CDVDDemuxClient::RequestStreams - invalid video stream at pos %d", i);
-        DisposeStreams();
-        return;
-      }
-      CDemuxStreamVideoClient* st = nullptr;
-      if (m_streams[i])
-      {
-        st = dynamic_cast<CDemuxStreamVideoClient*>(m_streams[i]);
-        if (!st
-            || (st->codec != source->codec)
-            || (st->iWidth != source->iWidth)
-            || (st->iHeight != source->iHeight))
-          DisposeStream(i);
-      }
-      if (!m_streams[i])
-      {
-        st = new CDemuxStreamVideoClient();
-        st->m_parser = av_parser_init(source->codec);
-        if(st->m_parser)
-          st->m_parser->flags |= PARSER_FLAG_COMPLETE_FRAMES;
-      }
-      st->iFpsScale       = source->irFpsScale;
-      st->iFpsRate        = source->irFpsRate;
-      st->iHeight         = source->iHeight;
-      st->iWidth          = source->iWidth;
-      st->fAspect         = source->fAspect;
-      st->stereo_mode     = "mono";
-      m_streams[i] = st;
-      st->m_parser_split = true;
-    }
-    else if (stream->type == STREAM_SUBTITLE)
-    {
-      CDemuxStreamSubtitle *source = dynamic_cast<CDemuxStreamSubtitle*>(stream);
-      if (!source)
-      {
-        CLog::Log(LOGERROR, "CDVDDemuxClient::RequestStreams - invalid subtitle stream at pos %d", i);
-        DisposeStreams();
-        return;
-      }
-      CDemuxStreamSubtitleClient* st = nullptr;
-      if (m_streams[i])
-      {
-        st = dynamic_cast<CDemuxStreamSubtitleClient*>(m_streams[i]);
-        if (!st || (st->codec != source->codec))
-          DisposeStream(i);
-      }
-      if (!m_streams[i])
-      {
-        st = new CDemuxStreamSubtitleClient();
-      }
-      if (source->ExtraSize == 4)
-      {
-        st->ExtraData = new uint8_t[4];
-        st->ExtraSize = 4;
-        for (int j=0; j<4; j++)
-          st->ExtraData[j] = source->ExtraData[j];
-      }
-      m_streams[i] = st;
-    }
-    else if (stream->type == STREAM_TELETEXT)
-    {
-      if (m_streams[i])
-      {
-        if (m_streams[i]->codec != stream->codec)
-          DisposeStream(i);
-      }
-      if (!m_streams[i])
-        m_streams[i] = new CDemuxStreamTeletext();
-    }
-    else if (stream->type == STREAM_RADIO_RDS)
-    {
-      if (m_streams[i])
-      {
-        if (m_streams[i]->codec != stream->codec)
-          DisposeStream(i);
-      }
-      if (!m_streams[i])
-        m_streams[i] = new CDemuxStreamRadioRDS();
-    }
-    else
-    {
-      if (m_streams[i])
-        DisposeStream(i);
-      m_streams[i] = new CDemuxStream();
-    }
-
-    m_streams[i]->codec = stream->codec;
-    m_streams[i]->iId = i;
-    m_streams[i]->iPhysicalId = stream->iPhysicalId;
-    for (int j=0; j<4; j++)
-      m_streams[i]->language[j] = stream->language[j];
-
-    m_streams[i]->realtime = stream->realtime;
-
-    CLog::Log(LOGDEBUG,"CDVDDemuxClient::RequestStreams(): added/updated stream %d:%d with codec_id %d",
-        m_streams[i]->iId,
-        m_streams[i]->iPhysicalId,
-        m_streams[i]->codec);
-  }
-  // check if we need to dispose any streams no longer in props
-  for (int j = i; j < MAX_STREAMS; j++)
-  {
-    if (m_streams[j])
-    {
-      CLog::Log(LOGDEBUG,"CDVDDemuxClient::RequestStreams(): disposed stream %d:%d with codec_id %d",
-          m_streams[j]->iId,
-          m_streams[j]->iPhysicalId,
-          m_streams[j]->codec);
-      DisposeStream(j);
-    }
-  }
-}
-
-int CDVDDemuxClient::GetNrOfStreams()
-{
-  int i = 0;
-  while (i < MAX_STREAMS && m_streams[i])
-    i++;
-  return i;
-}
-
-std::string CDVDDemuxClient::GetFileName()
-{
-  if (m_pInput)
-    return m_pInput->GetFileName();
-  else
-    return "";
-}
-
-std::string CDVDDemuxClient::GetStreamCodecName(int iStreamId)
-{
-  CDemuxStream *stream = GetStream(iStreamId);
-  std::string strName;
-  if (stream)
-  {
-    if (stream->codec == AV_CODEC_ID_AC3)
-      strName = "ac3";
-    else if (stream->codec == AV_CODEC_ID_MP2)
-      strName = "mp2";
-    else if (stream->codec == AV_CODEC_ID_AAC)
-      strName = "aac";
-    else if (stream->codec == AV_CODEC_ID_DTS)
-      strName = "dca";
-    else if (stream->codec == AV_CODEC_ID_MPEG2VIDEO)
-      strName = "mpeg2video";
-    else if (stream->codec == AV_CODEC_ID_H264)
-      strName = "h264";
-    else if (stream->codec == AV_CODEC_ID_EAC3)
-      strName = "eac3";
-  }
-  return strName;
-}
-
-bool CDVDDemuxClient::SeekTime(int timems, bool backwards, double *startpts)
-{
-  if (m_IDemux)
-  {
-    return m_IDemux->SeekTime(timems, backwards, startpts);
-  }
-  return false;
-}
-
-void CDVDDemuxClient::SetSpeed (int speed)
-{
-  if (m_IDemux)
-  {
-    m_IDemux->SetSpeed(speed);
-  }
-}
diff --git a/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemuxClient.h b/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemuxClient.h
deleted file mode 100644
index ae17608..0000000
--- a/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemuxClient.h
+++ /dev/null
@@ -1,63 +0,0 @@
-#pragma once
-/*
- *      Copyright (C) 2012-2013 Team XBMC
- *      http://xbmc.org
- *
- *  This Program is free software; you can redistribute it and/or modify
- *  it under the terms of the GNU General Public License as published by
- *  the Free Software Foundation; either version 2, or (at your option)
- *  any later version.
- *
- *  This Program is distributed in the hope that it will be useful,
- *  but WITHOUT ANY WARRANTY; without even the implied warranty of
- *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
- *  GNU General Public License for more details.
- *
- *  You should have received a copy of the GNU General Public License
- *  along with XBMC; see the file COPYING.  If not, see
- *  <http://www.gnu.org/licenses/>.
- *
- */
-
-#include "DVDDemux.h"
-
-extern "C" {
-#include "libavcodec/avcodec.h"
-#include "libavformat/avformat.h"
-}
-
-class CDVDDemuxClient : public CDVDDemux
-{
-public:
-
-  CDVDDemuxClient();
-  ~CDVDDemuxClient();
-
-  bool Open(CDVDInputStream* pInput);
-  void Dispose();
-  void Reset() override;
-  void Abort() override;
-  void Flush() override;
-  DemuxPacket* Read() override;
-  bool SeekTime(int time, bool backwords = false, double* startpts = NULL) override;
-  void SetSpeed(int iSpeed) override;
-  int GetStreamLength() override { return 0; }
-  CDemuxStream* GetStream(int iStreamId) override;
-  int GetNrOfStreams() override;
-  std::string GetFileName() override;
-  virtual std::string GetStreamCodecName(int iStreamId) override;
-
-protected:
-  void RequestStreams();
-  void ParsePacket(DemuxPacket* pPacket);
-  void DisposeStream(int iStreamId);
-  void DisposeStreams();
-  
-  CDVDInputStream* m_pInput;
-  CDVDInputStream::IDemux *m_IDemux;
-#ifndef MAX_STREAMS
-  #define MAX_STREAMS 100
-#endif
-  CDemuxStream* m_streams[MAX_STREAMS]; // maximum number of streams that ffmpeg can handle
-};
-
diff --git a/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemuxPVRClient.cpp b/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemuxPVRClient.cpp
new file mode 100644
index 0000000..2e05add
--- /dev/null
+++ b/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemuxPVRClient.cpp
@@ -0,0 +1,517 @@
+/*
+ *      Copyright (C) 2012-2013 Team XBMC
+ *      http://xbmc.org
+ *
+ *  This Program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2, or (at your option)
+ *  any later version.
+ *
+ *  This Program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with XBMC; see the file COPYING.  If not, see
+ *  <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#include "DVDInputStreams/DVDInputStream.h"
+#include "DVDDemuxPVRClient.h"
+#include "DVDDemuxUtils.h"
+#include "utils/log.h"
+#include "pvr/PVRManager.h"
+#include "pvr/addons/PVRClients.h"
+#include "settings/Settings.h"
+#include "../DVDClock.h"
+
+#define FF_MAX_EXTRADATA_SIZE ((1 << 28) - FF_INPUT_BUFFER_PADDING_SIZE)
+
+using namespace PVR;
+
+CDemuxStreamPVRInternal::CDemuxStreamPVRInternal(CDVDDemuxPVRClient *parent)
+ : m_parent(parent)
+ , m_parser(NULL)
+ , m_context(NULL)
+ , m_parser_split(false)
+{
+}
+
+CDemuxStreamPVRInternal::~CDemuxStreamPVRInternal()
+{
+  DisposeParser();
+}
+
+void CDemuxStreamPVRInternal::DisposeParser()
+{
+  if (m_parser)
+  {
+    av_parser_close(m_parser);
+    m_parser = NULL;
+  }
+  if (m_context)
+  {
+    avcodec_close(m_context);
+    m_context = NULL;
+  }
+}
+
+std::string CDemuxStreamVideoPVRClient::GetStreamInfo()
+{
+  std::string strInfo;
+  switch (codec)
+  {
+    case AV_CODEC_ID_MPEG2VIDEO:
+      strInfo = "mpeg2video";
+      break;
+    case AV_CODEC_ID_H264:
+      strInfo = "h264";
+      break;
+    default:
+      break;
+  }
+
+  return strInfo;
+}
+
+std::string CDemuxStreamAudioPVRClient::GetStreamInfo()
+{
+  std::string strInfo;
+  switch (codec)
+  {
+    case AV_CODEC_ID_AC3:
+      strInfo = "ac3";
+      break;
+    case AV_CODEC_ID_EAC3:
+      strInfo = "eac3";
+      break;
+    case AV_CODEC_ID_MP2:
+      strInfo = "mpeg2audio";
+      break;
+    case AV_CODEC_ID_AAC:
+      strInfo = "aac";
+      break;
+    case AV_CODEC_ID_DTS:
+      strInfo = "dts";
+      break;
+    default:
+      break;
+  }
+
+  return strInfo;
+}
+
+std::string CDemuxStreamSubtitlePVRClient::GetStreamInfo()
+{
+  return "";
+}
+
+CDVDDemuxPVRClient::CDVDDemuxPVRClient() : CDVDDemux()
+{
+  m_pInput = NULL;
+  for (int i = 0; i < MAX_STREAMS; i++) m_streams[i] = NULL;
+}
+
+CDVDDemuxPVRClient::~CDVDDemuxPVRClient()
+{
+  Dispose();
+}
+
+bool CDVDDemuxPVRClient::Open(CDVDInputStream* pInput)
+{
+  Abort();
+
+  m_pInput = pInput;
+  if (!g_PVRClients->GetPlayingClient(m_pvrClient))
+    return false;
+
+  return true;
+}
+
+void CDVDDemuxPVRClient::Dispose()
+{
+  for (int i = 0; i < MAX_STREAMS; i++)
+  {
+    delete m_streams[i];
+    m_streams[i] = NULL;
+  }
+
+  m_pInput = NULL;
+}
+
+void CDVDDemuxPVRClient::DisposeStream(int iStreamId)
+{
+  if (iStreamId < 0 || iStreamId >= MAX_STREAMS)
+    return;
+  delete m_streams[iStreamId];
+  m_streams[iStreamId] = NULL;
+}
+
+void CDVDDemuxPVRClient::Reset()
+{
+  if(m_pInput && g_PVRManager.IsStarted())
+    m_pvrClient->DemuxReset();
+
+  CDVDInputStream* pInputStream = m_pInput;
+  Dispose();
+  Open(pInputStream);
+}
+
+void CDVDDemuxPVRClient::Abort()
+{
+  if(m_pInput)
+    m_pvrClient->DemuxAbort();
+}
+
+void CDVDDemuxPVRClient::Flush()
+{
+  if(m_pInput && g_PVRManager.IsStarted())
+    m_pvrClient->DemuxFlush();
+}
+
+void CDVDDemuxPVRClient::ParsePacket(DemuxPacket* pkt)
+{
+  CDemuxStream* st = m_streams[pkt->iStreamId];
+  if (st == NULL)
+    return;
+
+  if (st->ExtraSize)
+    return;
+
+  CDemuxStreamPVRInternal* pvr = dynamic_cast<CDemuxStreamPVRInternal*>(st);
+
+  if(pvr == NULL
+  || pvr->m_parser == NULL)
+    return;
+
+  if(pvr->m_context == NULL)
+  {
+    AVCodec *codec = avcodec_find_decoder(st->codec);
+    if (codec == NULL)
+    {
+      CLog::Log(LOGERROR, "%s - can't find decoder", __FUNCTION__);
+      pvr->DisposeParser();
+      return;
+    }
+
+    pvr->m_context = avcodec_alloc_context3(codec);
+    if(pvr->m_context == NULL)
+    {
+      CLog::Log(LOGERROR, "%s - can't allocate context", __FUNCTION__);
+      pvr->DisposeParser();
+      return;
+    }
+    pvr->m_context->time_base.num = 1;
+    pvr->m_context->time_base.den = DVD_TIME_BASE;
+  }
+
+  if(pvr->m_parser_split && pvr->m_parser->parser->split)
+  {
+    int len = pvr->m_parser->parser->split(pvr->m_context, pkt->pData, pkt->iSize);
+    if (len > 0 && len < FF_MAX_EXTRADATA_SIZE)
+    {
+      if (st->ExtraData)
+        delete[] (uint8_t*)st->ExtraData;
+      st->changes++;
+      st->disabled = false;
+      st->ExtraSize = len;
+      st->ExtraData = new uint8_t[len+FF_INPUT_BUFFER_PADDING_SIZE];
+      memcpy(st->ExtraData, pkt->pData, len);
+      memset((uint8_t*)st->ExtraData + len, 0 , FF_INPUT_BUFFER_PADDING_SIZE);
+      pvr->m_parser_split = false;
+    }
+  }
+
+
+  uint8_t *outbuf = NULL;
+  int      outbuf_size = 0;
+  int len = av_parser_parse2(pvr->m_parser
+                                        , pvr->m_context, &outbuf, &outbuf_size
+                                        , pkt->pData, pkt->iSize
+                                        , (int64_t)(pkt->pts * DVD_TIME_BASE)
+                                        , (int64_t)(pkt->dts * DVD_TIME_BASE)
+                                        , 0);
+  /* our parse is setup to parse complete frames, so we don't care about outbufs */
+  if(len >= 0)
+  {
+#define CHECK_UPDATE(st, trg, src, invalid) do { \
+      if(src != invalid \
+      && src != st->trg) { \
+        CLog::Log(LOGDEBUG, "%s - {%d} " #trg " changed from %d to %d",  __FUNCTION__, st->iId, st->trg, src); \
+        st->trg = src; \
+        st->changes++; \
+        st->disabled = false; \
+      } \
+    } while(0)
+
+
+    CHECK_UPDATE(st, profile, pvr->m_context->profile , FF_PROFILE_UNKNOWN);
+    CHECK_UPDATE(st, level  , pvr->m_context->level   , FF_LEVEL_UNKNOWN);
+
+    switch (st->type)
+    {
+      case STREAM_AUDIO: {
+        CDemuxStreamAudioPVRClient* sta = static_cast<CDemuxStreamAudioPVRClient*>(st);
+        CHECK_UPDATE(sta, iChannels     , pvr->m_context->channels   , 0);
+        CHECK_UPDATE(sta, iSampleRate   , pvr->m_context->sample_rate, 0);
+        break;
+      }
+      case STREAM_VIDEO: {
+        CDemuxStreamVideoPVRClient* stv = static_cast<CDemuxStreamVideoPVRClient*>(st);
+        CHECK_UPDATE(stv, iWidth        , pvr->m_context->width , 0);
+        CHECK_UPDATE(stv, iHeight       , pvr->m_context->height, 0);
+        break;
+      }
+
+      default:
+        break;
+    }
+
+#undef CHECK_UPDATE
+  }
+  else
+    CLog::Log(LOGDEBUG, "%s - parser returned error %d", __FUNCTION__, len);
+
+  return;
+}
+
+DemuxPacket* CDVDDemuxPVRClient::Read()
+{
+  if (!g_PVRManager.IsStarted())
+    return CDVDDemuxUtils::AllocateDemuxPacket(0);
+
+  DemuxPacket* pPacket = m_pvrClient->DemuxRead();
+  if (!pPacket)
+  {
+    if (m_pInput)
+      m_pInput->Close();
+    return NULL;
+  }
+
+  if (pPacket->iStreamId == DMX_SPECIALID_STREAMINFO)
+  {
+    RequestStreams();
+    CDVDDemuxUtils::FreeDemuxPacket(pPacket);
+    return CDVDDemuxUtils::AllocateDemuxPacket(0);
+  }
+  else if (pPacket->iStreamId == DMX_SPECIALID_STREAMCHANGE)
+  {
+    RequestStreams();
+  }
+  else if (pPacket->iStreamId >= 0
+        && pPacket->iStreamId < MAX_STREAMS
+        && m_streams[pPacket->iStreamId])
+  {
+    ParsePacket(pPacket);
+  }
+
+  return pPacket;
+}
+
+CDemuxStream* CDVDDemuxPVRClient::GetStream(int iStreamId)
+{
+  if (iStreamId < 0 || iStreamId >= MAX_STREAMS) return NULL;
+    return m_streams[iStreamId];
+}
+
+void CDVDDemuxPVRClient::RequestStreams()
+{
+  if (!g_PVRManager.IsStarted())
+    return;
+
+  PVR_STREAM_PROPERTIES props = {};
+  m_pvrClient->GetStreamProperties(&props);
+  unsigned int i;
+
+  for (i = 0; i < props.iStreamCount; ++i)
+  {
+    CDemuxStream *stm = m_streams[i];
+
+    if (props.stream[i].iCodecType == XBMC_CODEC_TYPE_AUDIO)
+    {
+      CDemuxStreamAudioPVRClient* st = NULL;
+      if (stm)
+      {
+        st = dynamic_cast<CDemuxStreamAudioPVRClient*>(stm);
+        if (!st || (st->codec != (AVCodecID)props.stream[i].iCodecId))
+          DisposeStream(i);
+      }
+      if (!m_streams[i])
+      {
+        st = new CDemuxStreamAudioPVRClient(this);
+        st->m_parser = av_parser_init(props.stream[i].iCodecId);
+        if(st->m_parser)
+          st->m_parser->flags |= PARSER_FLAG_COMPLETE_FRAMES;
+      }
+      st->iChannels       = props.stream[i].iChannels;
+      st->iSampleRate     = props.stream[i].iSampleRate;
+      st->iBlockAlign     = props.stream[i].iBlockAlign;
+      st->iBitRate        = props.stream[i].iBitRate;
+      st->iBitsPerSample  = props.stream[i].iBitsPerSample;
+      m_streams[i] = st;
+      st->m_parser_split = true;
+      st->changes++;
+    }
+    else if (props.stream[i].iCodecType == XBMC_CODEC_TYPE_VIDEO)
+    {
+      CDemuxStreamVideoPVRClient* st = NULL;
+      if (stm)
+      {
+        st = dynamic_cast<CDemuxStreamVideoPVRClient*>(stm);
+        if (!st
+            || (st->codec != (AVCodecID)props.stream[i].iCodecId)
+            || (st->iWidth != props.stream[i].iWidth)
+            || (st->iHeight != props.stream[i].iHeight))
+          DisposeStream(i);
+      }
+      if (!m_streams[i])
+      {
+        st = new CDemuxStreamVideoPVRClient(this);
+        st->m_parser = av_parser_init(props.stream[i].iCodecId);
+        if(st->m_parser)
+          st->m_parser->flags |= PARSER_FLAG_COMPLETE_FRAMES;
+      }
+      st->iFpsScale       = props.stream[i].iFPSScale;
+      st->iFpsRate        = props.stream[i].iFPSRate;
+      st->iHeight         = props.stream[i].iHeight;
+      st->iWidth          = props.stream[i].iWidth;
+      st->fAspect         = props.stream[i].fAspect;
+      st->stereo_mode     = "mono";
+      m_streams[i] = st;
+      st->m_parser_split = true;
+    }
+    else if (props.stream[i].iCodecId == AV_CODEC_ID_DVB_TELETEXT)
+    {
+      if (stm)
+      {
+        if (stm->codec != (AVCodecID)props.stream[i].iCodecId)
+          DisposeStream(i);
+      }
+      if (!m_streams[i])
+        m_streams[i] = new CDemuxStreamTeletext();
+    }
+    else if (props.stream[i].iCodecType == XBMC_CODEC_TYPE_RDS &&
+             CSettings::GetInstance().GetBool("pvrplayback.enableradiords"))
+    {
+      CDemuxStreamRadioRDS* st = NULL;
+      if (stm)
+      {
+        st = dynamic_cast<CDemuxStreamRadioRDS*>(stm);
+        if (!st || (st->codec != (AVCodecID)props.stream[i].iCodecId))
+          DisposeStream(i);
+      }
+      if (!m_streams[i])
+        m_streams[i] = new CDemuxStreamRadioRDS();
+    }
+    else if (props.stream[i].iCodecType == XBMC_CODEC_TYPE_SUBTITLE)
+    {
+      CDemuxStreamSubtitlePVRClient* st = NULL;
+      if (stm)
+      {
+        st = dynamic_cast<CDemuxStreamSubtitlePVRClient*>(stm);
+        if (!st || (st->codec != (AVCodecID)props.stream[i].iCodecId))
+          DisposeStream(i);
+      }
+      if (!m_streams[i])
+      {
+        st = new CDemuxStreamSubtitlePVRClient(this);
+      }
+      if(props.stream[i].iIdentifier)
+      {
+        st->ExtraData = new uint8_t[4];
+        st->ExtraSize = 4;
+        st->ExtraData[0] = (props.stream[i].iIdentifier >> 8) & 0xff;
+        st->ExtraData[1] = (props.stream[i].iIdentifier >> 0) & 0xff;
+        st->ExtraData[2] = (props.stream[i].iIdentifier >> 24) & 0xff;
+        st->ExtraData[3] = (props.stream[i].iIdentifier >> 16) & 0xff;
+      }
+      m_streams[i] = st;
+    }
+    else
+    {
+      if (m_streams[i])
+        DisposeStream(i);
+      m_streams[i] = new CDemuxStream();
+    }
+
+    m_streams[i]->codec       = (AVCodecID)props.stream[i].iCodecId;
+    m_streams[i]->iId         = i;
+    m_streams[i]->iPhysicalId = props.stream[i].iPhysicalId;
+    m_streams[i]->language[0] = props.stream[i].strLanguage[0];
+    m_streams[i]->language[1] = props.stream[i].strLanguage[1];
+    m_streams[i]->language[2] = props.stream[i].strLanguage[2];
+    m_streams[i]->language[3] = props.stream[i].strLanguage[3];
+    m_streams[i]->realtime = true;
+
+    CLog::Log(LOGDEBUG,"CDVDDemuxPVRClient::RequestStreams(): added/updated stream %d:%d with codec_id %d",
+        m_streams[i]->iId,
+        m_streams[i]->iPhysicalId,
+        m_streams[i]->codec);
+  }
+  // check if we need to dispose any streams no longer in props
+  for (unsigned int j = i; j < MAX_STREAMS; j++)
+  {
+    if (m_streams[j])
+    {
+      CLog::Log(LOGDEBUG,"CDVDDemuxPVRClient::RequestStreams(): disposed stream %d:%d with codec_id %d",
+          m_streams[j]->iId,
+          m_streams[j]->iPhysicalId,
+          m_streams[j]->codec);
+      DisposeStream(j);
+    }
+  }
+}
+
+int CDVDDemuxPVRClient::GetNrOfStreams()
+{
+  int i = 0;
+  while (i < MAX_STREAMS && m_streams[i]) i++;
+  return i;
+}
+
+std::string CDVDDemuxPVRClient::GetFileName()
+{
+  if(m_pInput)
+    return m_pInput->GetFileName();
+  else
+    return "";
+}
+
+std::string CDVDDemuxPVRClient::GetStreamCodecName(int iStreamId)
+{
+  CDemuxStream *stream = GetStream(iStreamId);
+  std::string strName;
+  if (stream)
+  {
+    if (stream->codec == AV_CODEC_ID_AC3)
+      strName = "ac3";
+    else if (stream->codec == AV_CODEC_ID_MP2)
+      strName = "mp2";
+    else if (stream->codec == AV_CODEC_ID_AAC)
+      strName = "aac";
+    else if (stream->codec == AV_CODEC_ID_DTS)
+      strName = "dca";
+    else if (stream->codec == AV_CODEC_ID_MPEG2VIDEO)
+      strName = "mpeg2video";
+    else if (stream->codec == AV_CODEC_ID_H264)
+      strName = "h264";
+    else if (stream->codec == AV_CODEC_ID_EAC3)
+      strName = "eac3";
+  }
+  return strName;
+}
+
+bool CDVDDemuxPVRClient::SeekTime(int timems, bool backwards, double *startpts)
+{
+  if (m_pInput)
+    return m_pvrClient->SeekTime(timems, backwards, startpts);
+  return false;
+}
+
+void CDVDDemuxPVRClient::SetSpeed ( int speed )
+{
+  if (m_pInput)
+    m_pvrClient->SetSpeed(speed);
+}
diff --git a/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemuxPVRClient.h b/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemuxPVRClient.h
new file mode 100644
index 0000000..71045cb
--- /dev/null
+++ b/xbmc/cores/VideoPlayer/DVDDemuxers/DVDDemuxPVRClient.h
@@ -0,0 +1,118 @@
+#pragma once
+/*
+ *      Copyright (C) 2012-2013 Team XBMC
+ *      http://xbmc.org
+ *
+ *  This Program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2, or (at your option)
+ *  any later version.
+ *
+ *  This Program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with XBMC; see the file COPYING.  If not, see
+ *  <http://www.gnu.org/licenses/>.
+ *
+ */
+
+#include "DVDDemux.h"
+#include <map>
+#include "pvr/addons/PVRClient.h"
+
+extern "C" {
+#include "libavcodec/avcodec.h"
+#include "libavformat/avformat.h"
+}
+
+class CDVDDemuxPVRClient;
+struct PVR_STREAM_PROPERTIES;
+
+class CDemuxStreamPVRInternal
+{
+public:
+  CDemuxStreamPVRInternal(CDVDDemuxPVRClient *parent);
+  ~CDemuxStreamPVRInternal();
+
+  void DisposeParser();
+
+  CDVDDemuxPVRClient  * m_parent;
+  AVCodecParserContext* m_parser;
+  AVCodecContext      * m_context;
+  bool                  m_parser_split;
+};
+
+class CDemuxStreamVideoPVRClient
+  : public CDemuxStreamVideo
+  , public CDemuxStreamPVRInternal
+{
+public:
+  CDemuxStreamVideoPVRClient(CDVDDemuxPVRClient *parent)
+    : CDemuxStreamPVRInternal(parent)
+  {}
+  virtual std::string GetStreamInfo() override;
+};
+
+class CDemuxStreamAudioPVRClient
+  : public CDemuxStreamAudio
+  , public CDemuxStreamPVRInternal
+{
+public:
+  CDemuxStreamAudioPVRClient(CDVDDemuxPVRClient *parent)
+    : CDemuxStreamPVRInternal(parent)
+  {}
+  virtual std::string GetStreamInfo() override;
+};
+
+class CDemuxStreamSubtitlePVRClient
+  : public CDemuxStreamSubtitle
+  , public CDemuxStreamPVRInternal
+{
+public:
+  CDemuxStreamSubtitlePVRClient(CDVDDemuxPVRClient *parent)
+    : CDemuxStreamPVRInternal(parent)
+  {}
+  virtual std::string GetStreamInfo() override;
+};
+
+
+class CDVDDemuxPVRClient : public CDVDDemux
+{
+  friend class CDemuxStreamPVRInternal;
+
+public:
+
+  CDVDDemuxPVRClient();
+  ~CDVDDemuxPVRClient();
+
+  bool Open(CDVDInputStream* pInput);
+  void Dispose();
+  void Reset();
+  void Abort();
+  void Flush();
+  DemuxPacket* Read();
+  bool SeekTime(int time, bool backwords = false, double* startpts = NULL);
+  void SetSpeed(int iSpeed);
+  int GetStreamLength() { return 0; }
+  CDemuxStream* GetStream(int iStreamId);
+  int GetNrOfStreams();
+  std::string GetFileName();
+  virtual std::string GetStreamCodecName(int iStreamId) override;
+
+protected:
+  CDVDInputStream* m_pInput;
+#ifndef MAX_STREAMS
+  #define MAX_STREAMS 100
+#endif
+  CDemuxStream* m_streams[MAX_STREAMS]; // maximum number of streams that ffmpeg can handle
+  std::shared_ptr<PVR::CPVRClient> m_pvrClient;
+
+private:
+  void RequestStreams();
+  void ParsePacket(DemuxPacket* pPacket);
+  void DisposeStream(int iStreamId);
+};
+
diff --git a/xbmc/cores/VideoPlayer/DVDDemuxers/DVDFactoryDemuxer.cpp b/xbmc/cores/VideoPlayer/DVDDemuxers/DVDFactoryDemuxer.cpp
index 71d00da..a48a590 100644
--- a/xbmc/cores/VideoPlayer/DVDDemuxers/DVDFactoryDemuxer.cpp
+++ b/xbmc/cores/VideoPlayer/DVDDemuxers/DVDFactoryDemuxer.cpp
@@ -27,7 +27,7 @@
 #include "DVDDemuxFFmpeg.h"
 #include "DVDDemuxBXA.h"
 #include "DVDDemuxCDDA.h"
-#include "DVDDemuxClient.h"
+#include "DVDDemuxPVRClient.h"
 #include "pvr/PVRManager.h"
 #include "pvr/addons/PVRClients.h"
 
@@ -66,16 +66,6 @@ CDVDDemux* CDVDFactoryDemuxer::CreateDemuxer(CDVDInputStream* pInputStream, bool
     }
   }
 
-  // Input stream handles demuxing
-  if (pInputStream->GetIDemux())
-  {
-    std::unique_ptr<CDVDDemuxClient> demuxer(new CDVDDemuxClient());
-    if(demuxer->Open(pInputStream))
-      return demuxer.release();
-    else
-      return nullptr;
-  }
-
   bool streaminfo = true; /* Look for streams before playback */
   if (pInputStream->IsStreamType(DVDSTREAM_TYPE_PVRMANAGER))
   {
@@ -86,7 +76,7 @@ CDVDDemux* CDVDFactoryDemuxer::CreateDemuxer(CDVDInputStream* pInputStream, bool
     bool useFastswitch = URIUtils::IsUsingFastSwitch(pInputStream->GetFileName());
     streaminfo = !useFastswitch;
 
-    if (pOtherStream)
+    if(pOtherStream)
     {
       /* Used for MediaPortal PVR addon (uses PVR otherstream for playback of rtsp streams) */
       if (pOtherStream->IsStreamType(DVDSTREAM_TYPE_FFMPEG))
@@ -95,7 +85,22 @@ CDVDDemux* CDVDFactoryDemuxer::CreateDemuxer(CDVDInputStream* pInputStream, bool
         if(demuxer->Open(pOtherStream, streaminfo))
           return demuxer.release();
         else
-          return nullptr;
+          return NULL;
+      }
+    }
+
+    /* Use PVR demuxer only for live streams */
+    if (URIUtils::IsPVRChannel(pInputStream->GetFileName()))
+    {
+      std::shared_ptr<CPVRClient> client;
+      if (g_PVRClients->GetPlayingClient(client) &&
+          client->HandlesDemuxing())
+      {
+        std::unique_ptr<CDVDDemuxPVRClient> demuxer(new CDVDDemuxPVRClient());
+        if(demuxer->Open(pInputStream))
+          return demuxer.release();
+        else
+          return NULL;
       }
     }
   }
diff --git a/xbmc/cores/VideoPlayer/DVDDemuxers/Makefile.in b/xbmc/cores/VideoPlayer/DVDDemuxers/Makefile.in
index ee0ac9c..94ad153 100644
--- a/xbmc/cores/VideoPlayer/DVDDemuxers/Makefile.in
+++ b/xbmc/cores/VideoPlayer/DVDDemuxers/Makefile.in
@@ -4,7 +4,7 @@ SRCS  = DVDDemux.cpp
 SRCS += DVDDemuxBXA.cpp
 SRCS += DVDDemuxCDDA.cpp
 SRCS += DVDDemuxFFmpeg.cpp
-SRCS += DVDDemuxClient.cpp
+SRCS += DVDDemuxPVRClient.cpp
 SRCS += DVDDemuxUtils.cpp
 SRCS += DVDDemuxVobsub.cpp
 SRCS += DVDDemuxCC.cpp
diff --git a/xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStream.h b/xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStream.h
index a1b6598..c693962 100644
--- a/xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStream.h
+++ b/xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStream.h
@@ -53,9 +53,6 @@ namespace XFILE
   class CFile;
 }
 
-struct DemuxPacket;
-class CDemuxStream;
-
 class CDVDInputStream
 {
 public:
@@ -110,6 +107,7 @@ public:
     virtual double GetTimeStampCorrection() { return 0.0; };
     virtual bool GetState(std::string &xmlstate) = 0;
     virtual bool SetState(const std::string &xmlstate) = 0;
+
   };
 
   class ISeekable
@@ -120,19 +118,6 @@ public:
     virtual bool CanPause() = 0;
   };
 
-  class IDemux
-  {
-    public:
-    virtual bool OpenDemux() = 0;
-    virtual DemuxPacket* ReadDemux() = 0;
-    virtual CDemuxStream* GetStream(int iStreamId) = 0;
-    virtual int GetNrOfStreams() = 0;
-    virtual void SetSpeed(int iSpeed) = 0;
-    virtual bool SeekTime(int time, bool backward = false, double* startpts = NULL) = 0;
-    virtual void AbortDemux() = 0;
-    virtual void FlushDemux() = 0;
-  };
-
   enum ENextStream
   {
     NEXTSTREAM_NONE,
@@ -177,9 +162,6 @@ public:
 
   void SetRealtime(bool realtime) { m_realtime = realtime; }
 
-  // interfaces
-  virtual IDemux* GetIDemux() { return nullptr; }
-
 protected:
   DVDStreamType m_streamType;
   BitstreamStats m_stats;
diff --git a/xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStreamPVRManager.cpp b/xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStreamPVRManager.cpp
index bcd0578..fd7801b 100644
--- a/xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStreamPVRManager.cpp
+++ b/xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStreamPVRManager.cpp
@@ -28,7 +28,6 @@
 #include "pvr/addons/PVRClients.h"
 #include "pvr/channels/PVRChannelGroupsContainer.h"
 #include "settings/Settings.h"
-#include "cores/VideoPlayer/DVDDemuxers/DVDDemux.h"
 
 #include <assert.h>
 
@@ -50,15 +49,6 @@ CDVDInputStreamPVRManager::CDVDInputStreamPVRManager(IVideoPlayer* pPlayer, CFil
   m_eof = true;
   m_ScanTimeout.Set(0);
   m_isOtherStreamHack = false;
-  m_demuxActive = false;
-
-  m_StreamProps = new PVR_STREAM_PROPERTIES;
-  m_streamAudio = new CDemuxStreamAudio;
-  m_streamVideo = new CDemuxStreamVideo;
-  m_streamSubtitle = new CDemuxStreamSubtitle;
-  m_streamTeletext = new CDemuxStreamTeletext;
-  m_streamRadioRDS = new CDemuxStreamRadioRDS;
-  m_streamDefault = new CDemuxStream;
 }
 
 /************************************************************************
@@ -67,14 +57,6 @@ CDVDInputStreamPVRManager::CDVDInputStreamPVRManager(IVideoPlayer* pPlayer, CFil
 CDVDInputStreamPVRManager::~CDVDInputStreamPVRManager()
 {
   Close();
-
-  delete m_StreamProps;
-  delete m_streamAudio;
-  delete m_streamVideo;
-  delete m_streamSubtitle;
-  delete m_streamTeletext;
-  delete m_streamRadioRDS;
-  delete m_streamDefault;
 }
 
 void CDVDInputStreamPVRManager::ResetScanTimeout(unsigned int iTimeoutMs)
@@ -153,21 +135,10 @@ bool CDVDInputStreamPVRManager::Open()
       return false;
     }
   }
-  else
-  {
-    if (URIUtils::IsPVRChannel(url.Get()))
-    {
-      std::shared_ptr<CPVRClient> client;
-      if (g_PVRClients->GetPlayingClient(client) &&
-          client->HandlesDemuxing())
-        m_demuxActive = true;
-    }
-  }
 
   ResetScanTimeout((unsigned int) CSettings::GetInstance().GetInt(CSettings::SETTING_PVRPLAYBACK_SCANTIME) * 1000);
   CLog::Log(LOGDEBUG, "CDVDInputStreamPVRManager::Open - stream opened: %s", CURL::GetRedacted(transFile).c_str());
 
-  m_StreamProps->iStreamCount = 0;
   return true;
 }
 
@@ -430,151 +401,3 @@ bool CDVDInputStreamPVRManager::IsRealtime()
 {
   return g_PVRClients->IsRealTimeStream();
 }
-
-inline CDVDInputStream::IDemux* CDVDInputStreamPVRManager::GetIDemux()
-{
-  if (m_demuxActive)
-    return this;
-  else
-    return nullptr;
-}
-
-bool CDVDInputStreamPVRManager::OpenDemux()
-{
-  PVR_CLIENT client;
-  if (!g_PVRClients->GetPlayingClient(client))
-  {
-    return false;
-  }
-
-  client->GetStreamProperties(m_StreamProps);
-  return true;
-}
-
-DemuxPacket* CDVDInputStreamPVRManager::ReadDemux()
-{
-  PVR_CLIENT client;
-  if (!g_PVRClients->GetPlayingClient(client))
-  {
-    return nullptr;
-  }
-
-  DemuxPacket* pPacket = client->DemuxRead();
-  if (!pPacket)
-  {
-    return nullptr;
-  }
-  else if (pPacket->iStreamId == DMX_SPECIALID_STREAMINFO)
-  {
-    client->GetStreamProperties(m_StreamProps);
-    return pPacket;
-  }
-  else if (pPacket->iStreamId == DMX_SPECIALID_STREAMCHANGE)
-  {
-    client->GetStreamProperties(m_StreamProps);
-  }
-
-  return pPacket;
-}
-
-CDemuxStream* CDVDInputStreamPVRManager::GetStream(int iStreamId)
-{
-  CDemuxStream *ret = m_streamDefault;
-  m_streamDefault->type = STREAM_NONE;
-
-  if (m_StreamProps->stream[iStreamId].iCodecType == XBMC_CODEC_TYPE_AUDIO)
-  {
-    m_streamAudio->iChannels       = m_StreamProps->stream[iStreamId].iChannels;
-    m_streamAudio->iSampleRate     = m_StreamProps->stream[iStreamId].iSampleRate;
-    m_streamAudio->iBlockAlign     = m_StreamProps->stream[iStreamId].iBlockAlign;
-    m_streamAudio->iBitRate        = m_StreamProps->stream[iStreamId].iBitRate;
-    m_streamAudio->iBitsPerSample  = m_StreamProps->stream[iStreamId].iBitsPerSample;
-
-    ret = m_streamAudio;
-  }
-  else if (m_StreamProps->stream[iStreamId].iCodecType == XBMC_CODEC_TYPE_VIDEO)
-  {
-    m_streamVideo->iFpsScale       = m_StreamProps->stream[iStreamId].iFPSScale;
-    m_streamVideo->iFpsRate        = m_StreamProps->stream[iStreamId].iFPSRate;
-    m_streamVideo->iHeight         = m_StreamProps->stream[iStreamId].iHeight;
-    m_streamVideo->iWidth          = m_StreamProps->stream[iStreamId].iWidth;
-    m_streamVideo->fAspect         = m_StreamProps->stream[iStreamId].fAspect;
-    m_streamVideo->stereo_mode     = "mono";
-
-    ret = m_streamVideo;
-  }
-  else if (m_StreamProps->stream[iStreamId].iCodecType == XBMC_CODEC_TYPE_SUBTITLE)
-  {
-    if(m_StreamProps->stream[iStreamId].iIdentifier)
-    {
-      m_streamSubtitle->ExtraData = new uint8_t[4];
-      m_streamSubtitle->ExtraSize = 4;
-      m_streamSubtitle->ExtraData[0] = (m_StreamProps->stream[iStreamId].iIdentifier >> 8) & 0xff;
-      m_streamSubtitle->ExtraData[1] = (m_StreamProps->stream[iStreamId].iIdentifier >> 0) & 0xff;
-      m_streamSubtitle->ExtraData[2] = (m_StreamProps->stream[iStreamId].iIdentifier >> 24) & 0xff;
-      m_streamSubtitle->ExtraData[3] = (m_StreamProps->stream[iStreamId].iIdentifier >> 16) & 0xff;
-    }
-    ret = m_streamSubtitle;
-  }
-  else if (m_StreamProps->stream[iStreamId].iCodecId == AV_CODEC_ID_DVB_TELETEXT)
-  {
-    ret = m_streamTeletext;
-  }
-  else if (m_StreamProps->stream[iStreamId].iCodecType == XBMC_CODEC_TYPE_RDS &&
-           CSettings::GetInstance().GetBool("pvrplayback.enableradiords"))
-  {
-    ret = m_streamRadioRDS;
-  }
-
-  ret->codec = (AVCodecID)m_StreamProps->stream[iStreamId].iCodecId;
-  ret->iId = iStreamId;
-  ret->iPhysicalId = m_StreamProps->stream[iStreamId].iPhysicalId;
-  ret->language[0] = m_StreamProps->stream[iStreamId].strLanguage[0];
-  ret->language[1] = m_StreamProps->stream[iStreamId].strLanguage[1];
-  ret->language[2] = m_StreamProps->stream[iStreamId].strLanguage[2];
-  ret->language[3] = m_StreamProps->stream[iStreamId].strLanguage[3];
-  ret->realtime = true;
-  return ret;
-}
-
-int CDVDInputStreamPVRManager::GetNrOfStreams()
-{
-  return m_StreamProps->iStreamCount;
-}
-
-void CDVDInputStreamPVRManager::SetSpeed(int Speed)
-{
-  PVR_CLIENT client;
-  if (g_PVRClients->GetPlayingClient(client))
-  {
-    client->SetSpeed(Speed);
-  }
-}
-
-bool CDVDInputStreamPVRManager::SeekTime(int timems, bool backwards, double *startpts)
-{
-  PVR_CLIENT client;
-  if (g_PVRClients->GetPlayingClient(client))
-  {
-    return client->SeekTime(timems, backwards, startpts);
-  }
-  return false;
-}
-
-void CDVDInputStreamPVRManager::AbortDemux()
-{
-  PVR_CLIENT client;
-  if (g_PVRClients->GetPlayingClient(client))
-  {
-    client->DemuxAbort();
-  }
-}
-
-void CDVDInputStreamPVRManager::FlushDemux()
-{
-  PVR_CLIENT client;
-  if (g_PVRClients->GetPlayingClient(client))
-  {
-    client->DemuxFlush();
-  }
-}
diff --git a/xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStreamPVRManager.h b/xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStreamPVRManager.h
index d231bd4..69c93dc 100644
--- a/xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStreamPVRManager.h
+++ b/xbmc/cores/VideoPlayer/DVDInputStreams/DVDInputStreamPVRManager.h
@@ -35,19 +35,11 @@ class IRecordable;
 }
 
 class IVideoPlayer;
-struct PVR_STREAM_PROPERTIES;
-class CDemuxStreamAudio;
-class CDemuxStreamVideo;
-class CDemuxStreamSubtitle;
-class CDemuxStreamTeletext;
-class CDemuxStreamRadioRDS;
-class IDemux;
 
 class CDVDInputStreamPVRManager
   : public CDVDInputStream
   , public CDVDInputStream::IDisplayTime
   , public CDVDInputStream::ISeekable
-  , public CDVDInputStream::IDemux
 {
 public:
   CDVDInputStreamPVRManager(IVideoPlayer* pPlayer, CFileItem& fileitem);
@@ -96,18 +88,7 @@ public:
   /* returns m_pOtherStream */
   CDVDInputStream* GetOtherStream();
 
-  void ResetScanTimeout(unsigned int iTimeoutMs) override;
-
-  // Demux interface
-  virtual CDVDInputStream::IDemux* GetIDemux() override;
-  virtual bool OpenDemux() override;
-  virtual DemuxPacket* ReadDemux() override;
-  virtual CDemuxStream* GetStream(int iStreamId) override;
-  virtual int GetNrOfStreams() override;
-  virtual void SetSpeed(int iSpeed) override;
-  virtual bool SeekTime(int time, bool backward = false, double* startpts = NULL) override;
-  virtual void AbortDemux() override;
-  virtual void FlushDemux() override;
+  void ResetScanTimeout(unsigned int iTimeoutMs);
 
 protected:
   bool CloseAndOpen(const char* strFile);
@@ -118,17 +99,9 @@ protected:
   XFILE::ILiveTVInterface* m_pLiveTV;
   XFILE::IRecordable* m_pRecordable;
   bool m_eof;
-  bool m_demuxActive;
   std::string m_strContent;
   XbmcThreads::EndTime m_ScanTimeout;
   bool m_isOtherStreamHack;
-  PVR_STREAM_PROPERTIES *m_StreamProps;
-  CDemuxStreamAudio *m_streamAudio;
-  CDemuxStreamVideo *m_streamVideo;
-  CDemuxStreamSubtitle *m_streamSubtitle;
-  CDemuxStreamTeletext *m_streamTeletext;
-  CDemuxStreamRadioRDS *m_streamRadioRDS;
-  CDemuxStream *m_streamDefault;
 };
 
 
-- 
2.1.4

