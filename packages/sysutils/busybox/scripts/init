#!/bin/sh

################################################################################
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
################################################################################

. /functions

UPDATE_DIR=/storage/.update

/bin/busybox mkdir -p /dev /proc /sys /var /flash /storage /sysroot

/bin/busybox mount -t devtmpfs devtmpfs /dev
/bin/busybox mount -t proc proc /proc
/bin/busybox mount -t sysfs sysfs /sys
/bin/busybox mount -t tmpfs tmpfs /var

echo '1 4 1 7' > /proc/sys/kernel/printk

if [ -f "./platform_init" ]; then
  ./platform_init
fi

clear
hidecursor

for arg in $(cat /proc/cmdline); do
  case $arg in
    boot=*)
      boot="${arg#*=}"
      ;;
    disk=*)
      disk="${arg#*=}"
      ;;
  esac
done

debug_shell() {
  echo "### Starting debugging shell... ###"
  showcursor
  sh </dev/tty1 >/dev/tty1 2>&1
}

error() {
  echo "*** Error in $1: $2 ***"
  debug_shell
}

mount_part() {
  ERR=1
  for i in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15; do
    mount "$1" "$2" -o "$3" &>/dev/null
    [ "$?" -eq "0" ] && ERR=0 && break
    usleep 1000000
  done
  [ "$ERR" -ne "0" ] && error "mount_part" "Could not mount $1"
}

update() {
  if [ -f "$UPDATE_DIR/$1" -a -f "$2" ]; then
    mount -o remount,rw /flash
    start_progress percent "updating $1... " $2 $(stat -t "$UPDATE_DIR/$1" | cut -d" " -f2) \
      "dd if=$UPDATE_DIR/$1 of=$2 bs=1M conv=fsync 2>/dev/null" "done" "failed"
    mount -o remount,ro /flash
  fi
}

load_splash() {
  if [ -e /dev/fb0 ]; then
    ply-image /splash/splash.png &>/dev/null
  fi
}

load_kmap() {
  if [ -e /keymap ]; then
    loadkmap < /keymap
  fi
}

do_reboot() {
  start_progress spinner "system reboots now... "
  mountpoint -q /flash && umount /flash
  mountpoint -q /storage && umount /storage
  sync
  reboot -f
}

force_fsck() {
  echo -en "\033[$(($(stty size | cut -d" " -f1)-5));1H"
  echo "Filesystem corruption has been detected. Repairing..."
  e2fsck -y $disk
  FSCK_RET="$?"
  if [ "$(( $FSCK_RET & 8 ))" = 8 ] ; then
    echo "Forced fsck failed. Your system is broken beyond repair"
    while : ; do sleep 3600 ; done
  fi
  do_reboot
}

check_disks() {
  e2fsck -p $disk &>/dev/null
  FSCK_RET="$?"
  # FSCK_RET is the bit-wise OR of the exit codes for each filesystem that is checked.
  if [ "$(( $FSCK_RET & 4 ))" = 4 ] ; then
    force_fsck
  elif [ "$(( $FSCK_RET & 2 ))" = 2 ] ; then
    do_reboot
  fi
}

mount_parts() {
  mount_part "$boot" "/flash" "ro,noatime"
  mount_part "$disk" "/storage" "rw,noatime"
}

check_update() {
  UPDATE_TAR=`ls -1 "$UPDATE_DIR"/*.tar 2>/dev/null | head -n 1`
  if [ -f "$UPDATE_TAR" ] ; then
    echo -en "\033[$(($(stty size | cut -d" " -f1)-5));1H"
    start_progress spinner "Extracting $(basename $UPDATE_TAR)... " \
      "tar -xf $UPDATE_TAR -C $UPDATE_DIR &>/dev/null" "done" "failed"
    if [ "$?" -ne "0" ] ; then
      rm -rf $UPDATE_DIR/[0-9a-zA-Z]* &>/dev/null
      start_progress countdown "$UPDATE_TAR corrupted. normal startup in 10s... "
      return 0
    fi
    rm -rf "$UPDATE_TAR" &>/dev/null
  fi

  if [ -f "$UPDATE_DIR/kernel.img" -a -f "$UPDATE_DIR/root.sqfs" ] ; then
    update "kernel.img" "/flash/kernel.img"
    update "root.sqfs" "/flash/root.sqfs"
    rm -rf $UPDATE_DIR/[0-9a-zA-Z]* &>/dev/null
    do_reboot
  fi
}

prepare_sysroot() {
  mount_part "/flash/root.sqfs" "/sysroot" "ro,loop"

  mkdir -p /storage/.cache
  mkdir -p /storage/.config

  mount --move /flash /sysroot/flash
  mount --move /storage /sysroot/storage
}

for STEP in load_splash load_kmap check_disks mount_parts check_update prepare_sysroot; do
  $STEP
done

/bin/busybox mount --move /dev /sysroot/dev
/bin/busybox mount --move /proc /sysroot/proc
/bin/busybox mount --move /sys /sysroot/sys
/bin/busybox mount --move /var /sysroot/var

if [ -f /sysroot/storage/.resizeme ] ; then
  INIT_UNIT="--unit=fs-resize.target"
fi
exec /bin/busybox switch_root /sysroot /usr/lib/systemd/systemd $INIT_ARGS $INIT_UNIT
