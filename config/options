setup_toolchain() {
  if [ "$1" = target ]; then
    export DESTIMAGE="target"
    unset CPP
    export CC=$TARGET_CC
    export CXX=$TARGET_CXX
    export LD=$TARGET_LD
    export AS=$TARGET_AS
    export AR=$TARGET_AR
    export NM=$TARGET_NM
    export RANLIB=$TARGET_RANLIB
    export OBJCOPY=$TARGET_OBJCOPY
    export OBJDUMP=$TARGET_OBJDUMP
    export STRIP=$TARGET_STRIP
    export CPPFLAGS="$TARGET_CPPFLAGS"
    export CFLAGS="$TARGET_CFLAGS"
    export CXXFLAGS="$TARGET_CXXFLAGS"
    export LDFLAGS="$TARGET_LDFLAGS"
    export PKG_CONFIG_PATH="$TARGET_PKG_CONFIG_PATH"
    export PKG_CONFIG_LIBDIR="$TARGET_PKG_CONFIG_LIBDIR"
    export PKG_CONFIG_SYSROOT_DIR="$TARGET_PKG_CONFIG_SYSROOT_DIR"
    export CMAKE_CONF=$ROOT/$TOOLCHAIN/etc/cmake-$TARGET_NAME.conf
  elif [ "$1" = host ]; then
    export DESTIMAGE="host"
    unset CPP
    export AWK=$HOST_AWK
    export CC=$HOST_CC
    export CXX=$HOST_CXX
    export LD=$HOST_LD
    export AS=$HOST_AS
    export AR=$HOST_AR
    export NM=$HOST_NM
    export RANLIB=$HOST_RANLIB
    export OBJCOPY=$HOST_OBJCOPY
    export STRIP=$HOST_STRIP
    export CPPFLAGS="$HOST_CPPFLAGS"
    export CFLAGS="$HOST_CFLAGS"
    export CXXFLAGS="$HOST_CXXFLAGS"
    export LDFLAGS="$HOST_LDFLAGS"
    export PKG_CONFIG_PATH="$HOST_PKG_CONFIG_PATH"
    export PKG_CONFIG_LIBDIR="$HOST_PKG_CONFIG_LIBDIR"
    export PKG_CONFIG_SYSROOT_DIR="$HOST_PKG_CONFIG_SYSROOT_DIR"
    export CMAKE_CONF=$ROOT/$TOOLCHAIN/etc/cmake-$HOST_NAME.conf
  fi
}

# get kernel module dir
get_module_dir() {
  basename $(ls -d $(get_build_dir linux)/.install_pkg/lib/modules/*)
}

# get package's build dir
get_build_dir() {
  if [ ! -z $1 ] ; then
    local _PKG_DIR=$(find $ROOT/packages -name $1 2>/dev/null)
    if [ -d "$_PKG_DIR" -a -f $_PKG_DIR/package.mk ] ; then
      . $_PKG_DIR/package.mk
    fi
    echo $ROOT/$BUILD/${PKG_NAME}-${PKG_VERSION}
  fi
}

# get package's version
get_pkg_version() {
  if [ ! -z $1 ] ; then
    local _PKG_DIR=$(find $ROOT/packages -name $1 2>/dev/null)
    if [ -d "$_PKG_DIR" -a -f $_PKG_DIR/package.mk ] ; then
      . $_PKG_DIR/package.mk
    fi
    echo ${PKG_VERSION}
  fi
}

add_user() {
  # Usage: add_user "username" "password" "userid" "groupid" "description" "home" "shell"
  mkdir -p ${INSTALL}/etc
  touch ${INSTALL}/etc/passwd
  if [ -z "`grep "$1:" ${INSTALL}/etc/passwd`" ]; then
    echo "$1:x:$3:$4:$5:$6:$7" >> ${INSTALL}/etc/passwd
  fi

  touch ${INSTALL}/etc/shadow
  PASSWORD="$2"
  if [ "$PASSWORD" = "x" ]; then
    PASSWORD="*"
  fi
  if [ -z "`grep "$1:" ${INSTALL}/etc/shadow`" ]; then
    echo "$1:$PASSWORD:::::::" >> ${INSTALL}/etc/shadow
  fi
}

add_group() {
  # Usage: add_group "groupname" "groupid" ("members")
  mkdir -p ${INSTALL}/etc
  touch ${INSTALL}/etc/group
  if [ -z "`grep "$1:" ${INSTALL}/etc/group`" ]; then
    echo "$1:x:$2:$3" >> ${INSTALL}/etc/group
  fi
}

do_autoreconf() {
  export ACLOCAL_DIR=$SYSROOT_PREFIX/usr/share/aclocal

  if [ -e "$ROOT/$TOOLCHAIN/bin/autoconf" ]; then
    export AUTOCONF=$ROOT/$TOOLCHAIN/bin/autoconf
  fi

  if [ -e "$ROOT/$TOOLCHAIN/bin/automake" ]; then
    export AUTOMAKE=$ROOT/$TOOLCHAIN/bin/automake
  fi

  if [ -e "$ROOT/$TOOLCHAIN/bin/autopoint" ]; then
    export AUTOPOINT=$ROOT/$TOOLCHAIN/bin/autopoint
  fi

  if [ -e "$ROOT/$TOOLCHAIN/bin/libtoolize" ]; then
    export LIBTOOLIZE=$ROOT/$TOOLCHAIN/bin/libtoolize
  fi

  if [ -e "$ROOT/$TOOLCHAIN/bin/intltoolize" ]; then
    export INTLTOOLIZE=$ROOT/$TOOLCHAIN/bin/intltoolize
  fi

  if [ -e "$ROOT/$TOOLCHAIN/bin/aclocal" ]; then
    export ACLOCAL="$ROOT/$TOOLCHAIN/bin/aclocal -I $ACLOCAL_DIR"
  fi

  if [ -e "$ROOT/$TOOLCHAIN/bin/autoheader" ]; then
    export AUTOHEADER=$ROOT/$TOOLCHAIN/bin/autoheader
  fi

  if [ -e "$ROOT/$TOOLCHAIN/bin/libtool" ]; then
    export LIBTOOL=$ROOT/$TOOLCHAIN/bin/libtool
  fi

  if [ -e "$ROOT/$TOOLCHAIN/bin/autoreconf" -a -e "$INTLTOOLIZE" ]; then
    mkdir -p $ACLOCAL_DIR
    export AUTORECONF="$ROOT/$TOOLCHAIN/bin/autoreconf --verbose --force --install -I $ACLOCAL_DIR"
    $AUTORECONF $@
  fi
}

# Usage: enable_service <unit> [target]
enable_service () {
  local unit="$1"
  local unit_dir="/usr/lib/systemd/system"
  local target="$2"
  local target_dir=$INSTALL

  [ -f "$target_dir/$unit_dir/$unit" ] || exit 1
  [ -z "$target" ] && target=`grep '^WantedBy' $target_dir/$unit_dir/$unit | cut -f2 -d=`

  if [ -n "$target" ]; then
    mkdir -p ${target_dir}/$unit_dir/${target}.wants
    ln -sf ../${unit} ${target_dir}/$unit_dir/${target}.wants/
  fi
}

check_config() {
dashes="==========================="
  if [ ! -d $PROJECT_DIR/$PROJECT ]; then
    check_project="$check_project\n $dashes$dashes$dashes"
    check_project="$check_project\n ERROR: Project not found, use a valid project or create a new config"
    check_project="$check_project\n $dashes$dashes$dashes"
    check_project="$check_project\n\n Valid projects:"

    for projects in $PROJECT_DIR/*; do
      check_project="$check_project\n - $(basename $projects)"
    done
    echo -e $check_project
    exit 1
  fi

  if [ ! -f $PROJECT_DIR/$PROJECT/linux/linux.$TARGET_ARCH.conf ]; then
    check_arch="$check_arch\n $dashes$dashes$dashes"
    check_arch="$check_arch\n ERROR: Architecture not found, use a valid Architecture"
    check_arch="$check_arch\n for your project or create a new config"
    check_arch="$check_arch\n $dashes$dashes$dashes"
    check_arch="$check_arch\n\n Valid Architectures for your project: $PROJECT"

    for arch in $PROJECT_DIR/$PROJECT/linux/*.conf; do
      check_arch="$check_arch\n - $(basename $arch | cut -f2 -d".")"
    done
    echo -e $check_arch
    exit 1
  fi
}

show_config() {
  dashes="==========================="

  # OS configuration
  config_message="$config_message\n OS configuration:"
  config_message="$config_message\n $dashes$dashes"
  config_message="$config_message\n - CPU (ARCH):\t\t\t\t $TARGET_CPU ($TARGET_ARCH)"
  if [ -n "$OPENGLES" ] ; then
    config_message="$config_message\n - OpenGLES:\t\t\t\t $OPENGLES"
  fi
  for config_package in $ADDITIONAL_PACKAGES; do
    config_message="$config_message\n - Include package:\t\t\t $config_package"
  done

  # Kodi configuration
  config_message="$config_message\n\n Kodi configuration:"
  config_message="$config_message\n $dashes$dashes"
  config_message="$config_message\n - Kodi Player driver:\t\t\t $KODIPLAYER_DRIVER"
  config_message="$config_message\n - Kodi Webserver support:\t\t $KODI_WEBSERVER_SUPPORT"
  config_message="$config_message\n"

  echo -e "$config_message"
}

# strip
debug_strip() {
  if [ ! "$DEBUG" = yes ]; then
    $STRIP `find $* -type f -executable 2>/dev/null` 2>/dev/null || :
  fi
}

################################################################################
export LC_ALL=C

ROOT=`pwd`
DISTRO_DIR="$ROOT/distributions"
PROJECT_DIR="$ROOT/projects"

if [ -z "$DISTRO" ]; then
  for distro in $DISTRO_DIR/*; do
    DISTRO="$(basename $distro)"
    break
  done
fi

if [ -z "$PROJECT" ]; then
  for project in $PROJECT_DIR/*; do
    PROJECT="$(basename $project)"
    break
  done
fi

if [ -z "$ARCH" ]; then
  for arch in $PROJECT_DIR/$PROJECT/linux/*.conf; do
    TARGET_ARCH="$(basename $arch | cut -f2 -d".")"
    break
  done
else
  TARGET_ARCH="$ARCH"
fi

LINUX_DEPENDS="$PROJECT_DIR/$PROJECT/linux/linux.$TARGET_ARCH.conf $ROOT/packages/linux/package.mk"

################################################################################
# include versioning
. config/version

# Need to point to your actual cc
# If you have ccache installed, take care that LOCAL_CC don't point to it
LOCAL_CC=`which gcc`
if [ -z "$LOCAL_CC" ] ; then
  echo "***** Please install gcc *****"
  exit 127
fi

# Need to point to your actual g++
# If you have ccache installed, take care that LOCAL_CXX don't point to it
LOCAL_CXX=`which g++`

# Concurrency make level (-j option)
if test -z "${CONCURRENCY_MAKE_LEVEL}"; then
  CONCURRENCY_MAKE_LEVEL=`cat /proc/cpuinfo | grep -c '^processor[[:cntrl:]]*:'`
fi

# cache size for ccache
CCACHE_CACHE_SIZE="2G"

# read options
if [ -f "$DISTRO_DIR/$DISTRO/options" ]; then
  . $DISTRO_DIR/$DISTRO/options
fi
if [ -f "$PROJECT_DIR/$PROJECT/options" ]; then
  . $PROJECT_DIR/$PROJECT/options
fi
if [ -f "$HOME/.openelec/options" ]; then
  . $HOME/.openelec/options
fi
if [ -f "$HOME/.openelec/$PROJECT/options" ]; then
  . $HOME/.openelec/$PROJECT/options
fi

################################################################################
set -e

# setup initial directorys (relative to root)
CONFIG=config
SCRIPTS=scripts
PACKAGES=packages
SOURCES=sources
BUILD_BASE=build
TARGET=target
ADDONS=addons

# include ARCH specific options
if [ -f config/arch.$TARGET_ARCH ]; then
  . config/arch.$TARGET_ARCH
fi

HOST_NAME=`$LOCAL_CC -dumpmachine`
TARGET_NAME=$(echo $TARGET_SUBARCH | sed -e "s,-,,")-openelec-linux-gnu${TARGET_ABI}

BUILD=$BUILD_BASE.$DISTRONAME-$PROJECT-$OPENELEC_VERSION

TARGET_IMG=$ROOT/$TARGET
ADDON_BUILD="$BUILD/$ADDONS/$1"
STAMPS=$BUILD/.stamps
STAMPS_INSTALL=$BUILD/image/.stamps
TOOLCHAIN=$BUILD/toolchain
SYSROOT_PREFIX=$ROOT/$TOOLCHAIN/$TARGET_NAME/sysroot
TARGET_PREFIX=$ROOT/$TOOLCHAIN/bin/$TARGET_NAME-

FAKEROOT_SCRIPT=$ROOT/.fakeroot.$PROJECT.$TARGET_ARCH

if [ -z "$INSTALL" ]; then
  INSTALL=$BUILD/image/system
fi

MAKE="$ROOT/$TOOLCHAIN/bin/make"
MAKEINSTALL="$ROOT/$TOOLCHAIN/bin/make -j1 DESTDIR=$SYSROOT_PREFIX install"
SED="sed -i"

# set package metadata
PKG_NAME="$1"
PKG_VERSION="0.0invalid"
PKG_REV="0"
PKG_LICENSE="unknown"
PKG_URL=""
PKG_DEPENDS_TARGET=""
PKG_DEPENDS_HOST=""
PKG_DEPENDS_INIT=""
PKG_DEPENDS_BOOTSTRAP=""
PKG_SECTION=""
PKG_SHORTDESC="$1 (autogenerated)"
PKG_LONGDESC=""
PKG_IS_ADDON="no"

if [ -n "$1" ]; then
  _PKG_ROOT_NAME=$(echo $1 | cut -d: -f1)
  _ALL_DIRS=""
  _FOUND=0
  PKG_DIR=""

  # first check project folder for a package
  for DIR in $(find $ROOT/projects/$PROJECT/packages -type d -name $_PKG_ROOT_NAME 2>/dev/null); do
    if [ -r "$DIR/package.mk" ]; then
      # found first, set $PKG_DIR
      PKG_DIR="$DIR"
      # keep track of dirs with package.mk for detecting multiple folders
      _ALL_DIRS="${_ALL_DIRS}${DIR}\\n"
      _FOUND=$((_FOUND+1))
      if [ $_FOUND -gt 1 ]; then
        # _FOUND more ? fail
        echo "Error - multiple package folders:"
        echo -e "$_ALL_DIRS"
        exit 1
      fi
    fi
  done

  # then check packages folder if not found already
  if [ $_FOUND -eq 0 ]; then
    for DIR in $(find $ROOT/$PACKAGES -type d -name $_PKG_ROOT_NAME 2>/dev/null); do
      if [ -r "$DIR/package.mk" ]; then
        # found first, set $PKG_DIR
        PKG_DIR="$DIR"
        # keep track of dirs with package.mk for detecting multiple folders
        _ALL_DIRS="${_ALL_DIRS}${DIR}\\n"
        _FOUND=$((_FOUND+1))
        if [ $_FOUND -gt 1 ]; then
          # found more ? fail
          echo "Error - multiple package folders:"
          echo -e "$_ALL_DIRS"
          exit 1
        fi
      fi
    done
  fi
fi

if [ -r $PKG_DIR/package.mk ]; then
  . $PKG_DIR/package.mk
fi

if [ "$PKG_IS_ADDON" = "yes" ] ; then
  if [ -z "$PKG_ADDON_ID" ] ; then
    [ -z $PKG_SECTION ] && PKG_ADDON_ID="$PKG_NAME" || PKG_ADDON_ID="`echo $PKG_SECTION | sed 's,/,.,g'`.$PKG_NAME"
  fi
fi

PKG_BUILD="$BUILD/${PKG_NAME}-${PKG_VERSION}"

SSL_CERTIFICATES="/etc/ssl"

TOOLCHAIN_LANGUAGES=c,c++

unset TARGET_CPP

TARGET_CC=${TARGET_PREFIX}gcc
TARGET_CXX=${TARGET_PREFIX}g++
TARGET_LD=${TARGET_PREFIX}ld
TARGET_AS=${TARGET_PREFIX}as
TARGET_AR=${TARGET_PREFIX}ar
TARGET_NM=${TARGET_PREFIX}nm
TARGET_RANLIB=${TARGET_PREFIX}ranlib
TARGET_OBJCOPY=${TARGET_PREFIX}objcopy
TARGET_OBJDUMP=${TARGET_PREFIX}objdump
TARGET_STRIP=${TARGET_PREFIX}strip

################################################################################
TARGET_CPPFLAGS=
TARGET_CFLAGS="$TARGET_CFLAGS -w -pipe -Os $PROJECT_CFLAGS"
TARGET_CXXFLAGS="$TARGET_CFLAGS"
TARGET_LDFLAGS="$TARGET_LDFLAGS -Wl,--as-needed"
TARGET_LIBDIR="$SYSROOT_PREFIX/lib $SYSROOT_PREFIX/usr/lib"
TARGET_INCDIR="$SYSROOT_PREFIX/include $SYSROOT_PREFIX/usr/include"

HOST_CPPFLAGS=""
HOST_CFLAGS="-O2 -w -pipe -I$ROOT/$TOOLCHAIN/include"
HOST_CXXFLAGS="$HOST_CFLAGS"
HOST_LDFLAGS="-Wl,-rpath,$ROOT/$TOOLCHAIN/lib -L$ROOT/$TOOLCHAIN/lib"
HOST_LIBDIR="$ROOT/$TOOLCHAIN/lib"

if [ "$DEBUG" = yes ]; then
  TARGET_CFLAGS="$TARGET_CFLAGS -ggdb"
  TARGET_CXXFLAGS="$TARGET_CXXFLAGS -ggdb"
  TARGET_LDFLAGS="$TARGET_LDFLAGS -ggdb"
fi

# work around Ubuntu default C*FLAGS 
HOST_CFLAGS="$HOST_CFLAGS -Wno-format-security"
HOST_CXXFLAGS="$HOST_CXXFLAGS -Wno-format-security" 

# ubuntu/debian specific "multiarch support"
FAMILY_TRIPLET=$(echo $HOST_NAME | sed -e "s,$(uname -m),$(uname -i),")
if [ -d /lib/$FAMILY_TRIPLET ]; then
  HOST_LIBDIR="$HOST_LIBDIR /lib/$FAMILY_TRIPLET"
fi
if [ -d /usr/lib/$FAMILY_TRIPLET ]; then
  HOST_LIBDIR="$HOST_LIBDIR /usr/lib/$FAMILY_TRIPLET"
fi

# default multiarch support
case "`uname -m`" in
  i*86)
    if [ -d /lib32 ]; then
      HOST_LIBDIR="$HOST_LIBDIR /lib32"
    fi
    if [ -d /usr/lib32 ]; then
      HOST_LIBDIR="$HOST_LIBDIR /usr/lib32"
    fi
  ;;
  x86_64)
    if [ -d /lib64 ]; then
      HOST_LIBDIR="$HOST_LIBDIR /lib64"
    fi
    if [ -d /usr/lib64 ]; then
      HOST_LIBDIR="$HOST_LIBDIR /usr/lib64"
    fi
  ;;
esac

# default dirs
HOST_LIBDIR="$HOST_LIBDIR /lib /usr/lib"
HOST_INCDIR="$ROOT/$TOOLCHAIN/include /usr/include"
################################################################################

TARGET_PKG_CONFIG_PATH=""
TARGET_PKG_CONFIG_LIBDIR="$SYSROOT_PREFIX/usr/lib/pkgconfig:$SYSROOT_PREFIX/usr/share/pkgconfig"
TARGET_PKG_CONFIG_SYSROOT_DIR="$SYSROOT_PREFIX"

unset HOST_CPP

HOST_AWK=gawk
HOST_CC=$ROOT/$TOOLCHAIN/bin/host-gcc
HOST_CXX=$ROOT/$TOOLCHAIN/bin/host-g++
HOST_LD=ld
HOST_AS=as
HOST_AR=ar
HOST_NM=nm
HOST_RANLIB=ranlib
HOST_OBJCOPY=objcopy
HOST_STRIP=strip

HOST_PKG_CONFIG_PATH=""
HOST_PKG_CONFIG_LIBDIR="$ROOT/$TOOLCHAIN/lib/pkgconfig:$ROOT/$TOOLCHAIN/share/pkgconfig"
HOST_PKG_CONFIG_SYSROOT_DIR=""

if [ -z "$CCACHE_DIR" ]; then
  export CCACHE_DIR=$ROOT/$BUILD/.ccache-openelec
fi
export MAKEFLAGS=-j$CONCURRENCY_MAKE_LEVEL
export PKG_CONFIG=$ROOT/$TOOLCHAIN/bin/pkg-config

if [ -z "$PATH" -o "$PATH" = "${PATH#$ROOT/$TOOLCHAIN/bin:}" ]; then
  export PATH="$ROOT/$TOOLCHAIN/bin:$ROOT/$TOOLCHAIN/sbin:$PATH"
fi

if [ -z "$LD_LIBRARY_PATH" -o "$LD_LIBRARY_PATH" = "${LD_LIBRARY_PATH#$ROOT/$TOOLCHAIN/lib:}" ]; then
  export LD_LIBRARY_PATH="$ROOT/$TOOLCHAIN/lib:$LD_LIBRARY_PATH"
fi

BUILD_INDENT_SIZE=4

# define colors
boldred="\e[1;31m"
boldgreen="\e[1;32m"
boldyellow="\e[1;33m"
boldmagenta="\e[1;35m"
boldcyan="\e[1;36m"
boldwhite="\e[1;37m"
endcolor="\e[0m"

# meh
unset CONFIG_SITE
unset PYTHONSTARTUP
unset PYTHONPATH

# setup
check_config
setup_toolchain target
