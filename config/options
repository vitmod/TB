################################################################################
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
################################################################################

set -e

################################################################################
# functions
################################################################################
setup_toolchain() {
  if [ "$1" = target ]; then
    export DESTIMAGE="target"
    unset CPP
    export CC=$TARGET_CC
    export CXX=$TARGET_CXX
    export LD=$TARGET_LD
    export AS=$TARGET_AS
    export AR=$TARGET_AR
    export NM=$TARGET_NM
    export RANLIB=$TARGET_RANLIB
    export OBJCOPY=$TARGET_OBJCOPY
    export OBJDUMP=$TARGET_OBJDUMP
    export STRIP=$TARGET_STRIP
    export CPPFLAGS="$TARGET_CPPFLAGS"
    export CFLAGS="$TARGET_CFLAGS"
    export CXXFLAGS="$TARGET_CXXFLAGS"
    export LDFLAGS="$TARGET_LDFLAGS"
    export PKG_CONFIG_PATH="$TARGET_PKG_CONFIG_PATH"
    export PKG_CONFIG_LIBDIR="$TARGET_PKG_CONFIG_LIBDIR"
    export PKG_CONFIG_SYSROOT_DIR="$TARGET_PKG_CONFIG_SYSROOT_DIR"
    export CMAKE_CONF=$ROOT/$TOOLCHAIN/etc/cmake-$TARGET_NAME.conf
    if [ ! -f $CMAKE_CONF ] ; then
      mkdir -p $ROOT/$TOOLCHAIN/etc
      echo "SET(CMAKE_SYSTEM_NAME Linux)" >> $CMAKE_CONF
      echo "SET(CMAKE_SYSTEM_VERSION 1)"  >> $CMAKE_CONF
      echo "SET(CMAKE_SYSTEM_PROCESSOR  $TARGET_ARCH)" >> $CMAKE_CONF
      echo "SET(CMAKE_C_COMPILER   $TARGET_CC)"  >> $CMAKE_CONF
      echo "SET(CMAKE_CXX_COMPILER $TARGET_CXX)" >> $CMAKE_CONF
      echo "SET(CMAKE_FIND_ROOT_PATH  $SYSROOT_PREFIX)"   >> $CMAKE_CONF
      echo "SET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)" >> $CMAKE_CONF
      echo "SET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)"  >> $CMAKE_CONF
      echo "SET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)"  >> $CMAKE_CONF
    fi
    export _python_sysroot="$SYSROOT_PREFIX"
    export _python_prefix=/usr
    export _python_exec_prefix=/usr
  elif [ "$1" = host ]; then
    export DESTIMAGE="host"
    unset CPP
    export AWK=$HOST_AWK
    export CC=$HOST_CC
    export CXX=$HOST_CXX
    export LD=$HOST_LD
    export AS=$HOST_AS
    export AR=$HOST_AR
    export NM=$HOST_NM
    export RANLIB=$HOST_RANLIB
    export OBJCOPY=$HOST_OBJCOPY
    export STRIP=$HOST_STRIP
    export CPPFLAGS="$HOST_CPPFLAGS"
    export CFLAGS="$HOST_CFLAGS"
    export CXXFLAGS="$HOST_CXXFLAGS"
    export LDFLAGS="$HOST_LDFLAGS"
    export PKG_CONFIG_PATH="$HOST_PKG_CONFIG_PATH"
    export PKG_CONFIG_LIBDIR="$HOST_PKG_CONFIG_LIBDIR"
    export PKG_CONFIG_SYSROOT_DIR="$HOST_PKG_CONFIG_SYSROOT_DIR"
    export CMAKE_CONF=$ROOT/$TOOLCHAIN/etc/cmake-$HOST_NAME.conf
    if [ ! -f $CMAKE_CONF ] ; then
      echo "SET(CMAKE_SYSTEM_NAME Linux)" >> $CMAKE_CONF
      echo "SET(CMAKE_SYSTEM_VERSION 1)"  >> $CMAKE_CONF
      echo "SET(CMAKE_C_COMPILER   $HOST_CC)"  >> $CMAKE_CONF
      echo "SET(CMAKE_CXX_COMPILER $HOST_CXX)" >> $CMAKE_CONF
      echo "SET(CMAKE_FIND_ROOT_PATH  $ROOT/$TOOLCHAIN)" >> $CMAKE_CONF
      echo "SET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM BOTH)" >> $CMAKE_CONF
      echo "SET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY BOTH)" >> $CMAKE_CONF
      echo "SET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE BOTH)" >> $CMAKE_CONF
    fi
  fi
}

get_module_dir() {
  basename $(ls -d $(get_build_dir linux)/.install_pkg/lib/modules/*)
}

get_build_dir() {
  if [ ! -z $1 ] ; then
    local _PKG_DIR=$(find $ROOT/packages -name $1 | head -n1 2>/dev/null)
    if [ -d "$_PKG_DIR" -a -f $_PKG_DIR/package.mk ] ; then
      . $_PKG_DIR/package.mk
    fi
    echo $ROOT/$BUILD/${PKG_NAME}-${PKG_VERSION}
  fi
}

add_user() {
  # Usage: add_user "username" "password" "userid" "groupid" "description" "home" "shell"
  mkdir -p ${INSTALL}/etc
  touch ${INSTALL}/etc/passwd
  if [ -z "`grep "$1:" ${INSTALL}/etc/passwd`" ]; then
    echo "$1:x:$3:$4:$5:$6:$7" >> ${INSTALL}/etc/passwd
  fi

  touch ${INSTALL}/etc/shadow
  PASSWORD="$2"
  if [ "$PASSWORD" = "x" ]; then
    PASSWORD="*"
  fi
  if [ "$PASSWORD" = "empty" ]; then
    PASSWORD=""
  fi
  if [ -z "`grep "$1:" ${INSTALL}/etc/shadow`" ]; then
    echo "$1:$PASSWORD:::::::" >> ${INSTALL}/etc/shadow
  fi
}

add_group() {
  # Usage: add_group "groupname" "groupid" ("members")
  mkdir -p ${INSTALL}/etc
  touch ${INSTALL}/etc/group
  if [ -z "`grep "$1:" ${INSTALL}/etc/group`" ]; then
    echo "$1:x:$2:$3" >> ${INSTALL}/etc/group
  fi
}

do_autoreconf() {
  export ACLOCAL_DIR=$SYSROOT_PREFIX/usr/share/aclocal

  if [ -e "$ROOT/$TOOLCHAIN/bin/autoconf" ]; then
    export AUTOCONF=$ROOT/$TOOLCHAIN/bin/autoconf
  fi

  if [ -e "$ROOT/$TOOLCHAIN/bin/automake" ]; then
    export AUTOMAKE=$ROOT/$TOOLCHAIN/bin/automake
  fi

  if [ -e "$ROOT/$TOOLCHAIN/bin/autopoint" ]; then
    export AUTOPOINT=$ROOT/$TOOLCHAIN/bin/autopoint
  fi

  if [ -e "$ROOT/$TOOLCHAIN/bin/libtoolize" ]; then
    export LIBTOOLIZE=$ROOT/$TOOLCHAIN/bin/libtoolize
  fi

  if [ -e "$ROOT/$TOOLCHAIN/bin/intltoolize" ]; then
    export INTLTOOLIZE=$ROOT/$TOOLCHAIN/bin/intltoolize
  fi

  if [ -e "$ROOT/$TOOLCHAIN/bin/aclocal" ]; then
    export ACLOCAL="$ROOT/$TOOLCHAIN/bin/aclocal -I $ACLOCAL_DIR"
  fi

  if [ -e "$ROOT/$TOOLCHAIN/bin/autoheader" ]; then
    export AUTOHEADER=$ROOT/$TOOLCHAIN/bin/autoheader
  fi

  if [ -e "$ROOT/$TOOLCHAIN/bin/libtool" ]; then
    export LIBTOOL=$ROOT/$TOOLCHAIN/bin/libtool
  fi

  if [ -e "$ROOT/$TOOLCHAIN/bin/autoreconf" -a -e "$INTLTOOLIZE" ]; then
    mkdir -p $ACLOCAL_DIR
    export AUTORECONF="$ROOT/$TOOLCHAIN/bin/autoreconf --verbose --force --install -I $ACLOCAL_DIR"
    $AUTORECONF $@
  fi
}

enable_service () {
  # Usage: enable_service <unit> [target]
  local unit="$1"
  local unit_dir="/usr/lib/systemd/system"
  local target="$2"
  local target_dir=$INSTALL

  [ -f "$target_dir/$unit_dir/$unit" ] || exit 1
  if [ -z "$target" ] ; then
    for target in `grep '^WantedBy' $target_dir/$unit_dir/$unit | cut -f2 -d=` ; do
      if [ -n "$target" ]; then
        mkdir -p ${target_dir}/$unit_dir/${target}.wants
        ln -sf ../${unit} ${target_dir}/$unit_dir/${target}.wants/
      fi
    done
  fi
}

check_config() {
  if [ ! -d $PROJECT_DIR/$PROJECT ]; then
    msg="$msg\n ======================================================"
    msg="$msg\n ERROR: Project not found."
    msg="$msg\n ======================================================"
    msg="$msg\n\n Valid projects:"
    for projects in $PROJECT_DIR/*; do
      msg="$msg\n - $(basename $projects)"
    done
    echo -e $msg
    exit 1
  fi

  if [ ! -f $PROJECT_DIR/$PROJECT/linux/linux.$TARGET_ARCH.conf ]; then
    msg="$msg\n ======================================================"
    msg="$msg\n ERROR: Architecture not found."
    msg="$msg\n ======================================================"
    msg="$msg\n\n Valid Architectures for your project: $PROJECT"
    for arch in $PROJECT_DIR/$PROJECT/linux/*.conf; do
      msg="$msg\n - $(basename $arch | cut -f2 -d".")"
    done
    echo -e $msg
    exit 1
  fi
}

show_config() {
  msg="$msg\n OS configuration:"
  msg="$msg\n ======================================================"
  msg="$msg\n - CPU (ARCH):\t\t\t $TARGET_CPU ($TARGET_ARCH)"
  if [ -n "$OPENGLES" ] ; then
    msg="$msg\n - OpenGLES:\t\t\t $OPENGLES"
  fi
  for config_package in $ADDITIONAL_PACKAGES; do
    msg="$msg\n - Include package:\t\t $config_package"
  done
  msg="$msg\n\n Kodi configuration:"
  msg="$msg\n ======================================================"
  msg="$msg\n - Kodi Player driver:\t\t $KODIPLAYER_DRIVER"
  msg="$msg\n"
  echo -e "$msg"
}

check_root() {
  if [ ! "$(id -u)" = "0" ] ; then
    return
  fi

  cat << "EOF"

  DANGER ! DANGER ! DANGER !                     /===-_---~~~~~~~~~------____
                                                |===-~___                _,-'
                 -==\\                         `//~\\   ~~~~`---.___.-~~
             ______-==|                         | |  \\           _-~`
       __--~~~  ,-/-==\\                        | |   `\        ,'
    _-~       /'    |  \\                      / /      \      /
  .'        /       |   \\                   /' /        \   /'
 /  ____  /         |    \`\.__/-~~ ~ \ _ _/'  /          \/'
/-'~    ~~~~~---__  |     ~-/~         ( )   /'        _--~`
                  \_|      /        _)   ;  ),   __--~~ 
                    '~~--_/      _-~/-  / \   '-~ \          BUILDING AS ROOT
                   {\__--_/}    / \\_>- )<__\      \             IS DANGEROUS
                   /'   (_/  _-~  | |__>--<__|      |
                  |0  0 _/) )-~     | |__>--<__|     |  THERE WILL BE DRAGONS
                  / /~ ,_/       / /__>---<__/      | AND YOU'LL BE ALL ALONE
                 o o _//        /-~_>---<__-~      /
                 (^(~          /~_>---<__-      _-~               THINK TWICE
                ,/|           /__>--<__/     _-~
             ,//('(          |__>--<__|     /                  .----_
            ( ( '))          |__>--<__|    |                 /' _---_~\
         `-)) )) (           |__>--<__|    |               /'  /     ~\`\
        ,/,'//( (             \__>--<__\    \            /'  //        ||
      ,( ( ((, ))              ~-__>--<_~-_  ~--____---~' _/'/        /'
    `~/  )` ) ,/|                 ~-_~>--<_/-__       __-~ _/
  ._-~//( )/ )) `                    ~~-'_/_/ /~~~~~~~__--~
   ;'( ')/ ,)(                              ~~~~~~~~~~
  ' ') '( (/
    '   '  `
  o-<-<     <--- THIS IS YOU IF YOU CONTINUE FURTHER

EOF
  read -p "continue (y/n) ? " ans
  [ "$ans" = "y" ] && : || exit 1
}

check_deepmd5() {
  PKG_DEEPMD5=$(find $STAMP_DEPENDS -exec md5sum {} \; 2>/dev/null | sort | md5sum | cut -d" " -f1)
  if [ ! "$PKG_DEEPMD5" = "$STAMP_PKG_DEEPMD5" ] ; then
    return 1
  fi
  return 0
}

save_stamp() {
  PKG_DEEPMD5=$(find $STAMP_DEPENDS -exec md5sum {} \; 2>/dev/null | sort | md5sum | cut -d" " -f1)
  for i in PKG_NAME PKG_DEEPMD5; do
    eval val=\$$i
    echo "STAMP_$i=\"$val\"" >> $STAMP
  done
}

debug_strip() {
  if [ ! "$DEBUG" = yes ]; then
    if [ "$TARGET" = "target" ]; then
      # never strip glibc and kernel modules
      $STRIP `find $* -type f \
                   ! -name "*.ko" \
                   ! -name "ld-*.so" \
                   ! -name "libc-*.so" \
                   ! -name "libpthread-*.so" \
                   ! -name "libthread_db-*so" \
                   2>/dev/null` 2>/dev/null || :
    else
      $STRIP `find $* -type f 2>/dev/null` 2>/dev/null || :
    fi
  fi
}

cleanup_rpath() {
  # remove rpath. TODO: fix libtool?
  for bin in `find $1 -type f -executable 2>/dev/null` ; do
    if [ $(chrpath -l $bin 2>/dev/null | grep -c $(echo "PATH=$SYSROOT_PREFIX")) -gt 0 ] ; then
      chrpath -d $bin
    fi
  done
}

check_package() {
  if [ -z "$PKG_DIR" ] ; then
    printf "${boldred}$1: package not found${endcolor}\n"
    exit 1
  fi

  if [ ! -f "$PKG_DIR/package.mk" ]; then
    printf "${boldred}$1: no package.mk file found${endcolor}\n"
    exit 1
  fi
}

################################################################################
# buildsystem basics
################################################################################
export LC_ALL=C
ROOT=`pwd`
DISTRO_DIR="$ROOT/distributions"
PROJECT_DIR="$ROOT/projects"
CCACHE_CACHE_SIZE="2G"

if [ -z "$DISTRO" ]; then
  for distro in $DISTRO_DIR/*; do
    DISTRO="$(basename $distro)"
    break
  done
fi

if [ -z "$PROJECT" ]; then
  for project in $PROJECT_DIR/*; do
    PROJECT="$(basename $project)"
    break
  done
fi

if [ -z "$ARCH" ]; then
  for arch in $PROJECT_DIR/$PROJECT/linux/*.conf; do
    TARGET_ARCH="$(basename $arch | cut -f2 -d".")"
    break
  done
else
  TARGET_ARCH="$ARCH"
fi

# colors
boldred="\e[1;31m"
boldgreen="\e[1;32m"
boldyellow="\e[1;33m"
boldmagenta="\e[1;35m"
boldcyan="\e[1;36m"
boldwhite="\e[1;37m"
endcolor="\e[0m"

################################################################################
# config
################################################################################
. config/version

# read options
if [ -f "$DISTRO_DIR/$DISTRO/options" ]; then
  . $DISTRO_DIR/$DISTRO/options
fi
if [ -f "$PROJECT_DIR/$PROJECT/options" ]; then
  . $PROJECT_DIR/$PROJECT/options
fi
if [ -f "$HOME/.openelec/options" ]; then
  . $HOME/.openelec/options
fi
if [ -f "$HOME/.openelec/$PROJECT/options" ]; then
  . $HOME/.openelec/$PROJECT/options
fi

################################################################################
# more buildsystem stuff
################################################################################

# Need to point to your actual cc/g++
# If you have ccache installed, take care that LOCAL_CC / LOCAL_CXX don't point to it
LOCAL_CC=`which gcc`
LOCAL_CXX=`which g++`

# include ARCH specific options
if [ -f config/arch.$TARGET_ARCH ]; then
  . config/arch.$TARGET_ARCH
fi

HOST_NAME=`$LOCAL_CC -dumpmachine`
TARGET_NAME=$TARGET_GCC_ARCH-openelec-linux-gnu${TARGET_ABI}

BUILD=build.$DISTRONAME-$PROJECT-$OPENELEC_VERSION

TARGET_IMG=$ROOT/target
ADDON_BUILD="$BUILD/addons/$1"
STAMPS=$BUILD/.stamps
STAMPS_INSTALL=$BUILD/image/.stamps
TOOLCHAIN=$BUILD/toolchain
SYSROOT_PREFIX=$ROOT/$TOOLCHAIN/$TARGET_NAME/sysroot
TARGET_PREFIX=$ROOT/$TOOLCHAIN/bin/$TARGET_NAME-

MAKEINSTALL="make -j1 DESTDIR=$SYSROOT_PREFIX install"

FAKEROOT_SCRIPT=$ROOT/.fakeroot.$PROJECT.$TARGET_ARCH

export CCACHE_DIR=$ROOT/$BUILD/.ccache-openelec
export MAKEFLAGS=-j$(cat /proc/cpuinfo | grep -c '^processor[[:cntrl:]]*:')
export PKG_CONFIG=$ROOT/$TOOLCHAIN/bin/pkg-config

if [ -z "$INSTALL" ]; then
  INSTALL=$BUILD/image/system
fi

LINUX_DEPENDS="$PROJECT_DIR/$PROJECT/linux/linux.$TARGET_ARCH.conf $ROOT/packages/linux/package.mk"

################################################################################
# target environment
################################################################################
unset TARGET_CPP
TARGET_CC=${TARGET_PREFIX}gcc
TARGET_CXX=${TARGET_PREFIX}g++
TARGET_LD=${TARGET_PREFIX}ld
TARGET_AS=${TARGET_PREFIX}as
TARGET_AR=${TARGET_PREFIX}ar
TARGET_NM=${TARGET_PREFIX}nm
TARGET_RANLIB=${TARGET_PREFIX}ranlib
TARGET_OBJCOPY=${TARGET_PREFIX}objcopy
TARGET_OBJDUMP=${TARGET_PREFIX}objdump
TARGET_STRIP=${TARGET_PREFIX}strip

TARGET_PKG_CONFIG_PATH=""
TARGET_PKG_CONFIG_LIBDIR="$SYSROOT_PREFIX/usr/lib/pkgconfig:$SYSROOT_PREFIX/usr/share/pkgconfig"
TARGET_PKG_CONFIG_SYSROOT_DIR="$SYSROOT_PREFIX"

TARGET_CPPFLAGS=
TARGET_CFLAGS="$TARGET_CFLAGS -w -pipe -Os $PROJECT_CFLAGS"
TARGET_CXXFLAGS="$TARGET_CFLAGS"
TARGET_LDFLAGS="$TARGET_LDFLAGS -Wl,--as-needed"
TARGET_LIBDIR="$SYSROOT_PREFIX/lib $SYSROOT_PREFIX/usr/lib"
TARGET_INCDIR="$SYSROOT_PREFIX/include $SYSROOT_PREFIX/usr/include"

if [ "$DEBUG" = yes ]; then
  TARGET_CFLAGS="$TARGET_CFLAGS -ggdb"
  TARGET_CXXFLAGS="$TARGET_CXXFLAGS -ggdb"
  TARGET_LDFLAGS="$TARGET_LDFLAGS -ggdb"
fi

################################################################################
# hosst environment
################################################################################
unset HOST_CPP
HOST_CC=$ROOT/$TOOLCHAIN/bin/host-gcc
HOST_CXX=$ROOT/$TOOLCHAIN/bin/host-g++
HOST_LD=ld
HOST_AS=as
HOST_AR=ar
HOST_NM=nm
HOST_RANLIB=ranlib
HOST_OBJCOPY=objcopy
HOST_STRIP=strip
HOST_AWK=gawk

HOST_PKG_CONFIG_PATH=""
HOST_PKG_CONFIG_LIBDIR="$ROOT/$TOOLCHAIN/lib/pkgconfig:$ROOT/$TOOLCHAIN/share/pkgconfig"
HOST_PKG_CONFIG_SYSROOT_DIR=""

HOST_CPPFLAGS=""
HOST_CFLAGS="-O2 -w -pipe -I$ROOT/$TOOLCHAIN/include -Wno-format-security"
HOST_CXXFLAGS="$HOST_CFLAGS"
HOST_LDFLAGS="-Wl,-rpath,$ROOT/$TOOLCHAIN/lib -L$ROOT/$TOOLCHAIN/lib"
HOST_LIBDIR="$ROOT/$TOOLCHAIN/lib /lib /usr/lib"
HOST_INCDIR="$ROOT/$TOOLCHAIN/include /usr/include"

################################################################################
# export path / ld lib path & clean distro specific env
################################################################################
if [ -z "$PATH" -o "$PATH" = "${PATH#$ROOT/$TOOLCHAIN/bin:}" ]; then
  export PATH="$ROOT/$TOOLCHAIN/bin:$ROOT/$TOOLCHAIN/sbin:$PATH"
fi

if [ -z "$LD_LIBRARY_PATH" -o "$LD_LIBRARY_PATH" = "${LD_LIBRARY_PATH#$ROOT/$TOOLCHAIN/lib:}" ]; then
  export LD_LIBRARY_PATH="$ROOT/$TOOLCHAIN/lib:$LD_LIBRARY_PATH"
fi

unset CONFIG_SITE
unset PYTHONSTARTUP
unset PYTHONPATH

################################################################################
# set package metadata
################################################################################
PKG_NAME="$1"
PKG_VERSION="none"
PKG_URL=""
PKG_FETCH=""
PKG_DEPENDS_TARGET=""
PKG_DEPENDS_HOST=""
PKG_DEPENDS_INIT=""
PKG_DEPENDS_BOOTSTRAP=""
PKG_SHORTDESC="$1 (autogenerated)"

PKG_CMAKE_SCRIPT="CMakeLists.txt"
PKG_CONFIGURE_SCRIPT="configure"
PKG_CONFIGURE_OPTS_HOST=""
PKG_CONFIGURE_OPTS_TARGET=""
PKG_CONFIGURE_OPTS_INIT=""
PKG_CONFIGURE_OPTS_BOOTSTRAP=""
PKG_MAKE_OPTS_HOST=""
PKG_MAKE_OPTS_TARGET=""
PKG_MAKE_OPTS_INIT=""
PKG_MAKE_OPTS_BOOTSTRAP=""

PKG_IS_ADDON="no"
PKG_ADDON_REV="0"
PKG_ADDON_TYPE=""
PKG_ADDON_DESC=""
PKG_ADDON_SECTION=""
PKG_ADDON_MAINTAINER=""
PKG_ADDON_DISCLAIMER=""

if [ -n "$1" ]; then
  _PKG_ROOT_NAME=$(echo $1 | cut -d: -f1)
  PKG_DIR=$(find $ROOT/packages -name $_PKG_ROOT_NAME | head -n1 2>/dev/null)
fi

if [ -e $PKG_DIR/package.mk ]; then
  . $PKG_DIR/package.mk
fi

PKG_BUILD="$ROOT/$BUILD/${PKG_NAME}-${PKG_VERSION}"
STAMP_DEPENDS="$PKG_DIR $PKG_NEED_UNPACK $PROJECT_DIR/$PROJECT/patches/$PKG_NAME"

################################################################################
# setup
################################################################################
check_config
setup_toolchain target
