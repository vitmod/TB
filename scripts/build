#!/bin/bash

################################################################################
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
################################################################################

. config/options $1

if [ -z "$1" ]; then
  echo "usage: $0 package_name[:<host|target|init|bootstrap>]"
  exit 1
fi

check_package $1
scripts/unpack $PACKAGE_NAME

mkdir -p $STAMPS/$PACKAGE_NAME
STAMP=$STAMPS/$PACKAGE_NAME/build_$TARGET

if [ -f $STAMP ] ; then
  . $STAMP
  check_deepmd5 || rm -f $STAMP
fi

if [ -f $STAMP ] ; then
  exit 0
fi

case "$TARGET" in
  target|bootstrap|init)
    setup_toolchain target
    ;;
  host)
    setup_toolchain host
    ;;
esac

unset -f pre_build_$TARGET
unset -f pre_configure_$TARGET
unset -f configure_$TARGET
unset -f pre_make_$TARGET
unset -f make_$TARGET
unset -f post_make_$TARGET
unset -f pre_makeinstall_$TARGET
unset -f makeinstall_$TARGET
unset -f post_makeinstall_$TARGET

TARGET_CONFIGURE_OPTS="--host=$TARGET_NAME \
                       --build=$HOST_NAME \
                       --prefix=/usr \
                       --bindir=/usr/bin \
                       --sbindir=/usr/sbin \
                       --sysconfdir=/etc \
                       --libexecdir=/usr/lib \
                       --localstatedir=/var \
                       --enable-silent-rules \
                       --disable-dependency-tracking"

HOST_CONFIGURE_OPTS="--host=$HOST_NAME \
                     --build=$HOST_NAME \
                     --prefix=$ROOT/$TOOLCHAIN \
                     --bindir=$ROOT/$TOOLCHAIN/bin \
                     --sbindir=$ROOT/$TOOLCHAIN/sbin \
                     --sysconfdir=$ROOT/$TOOLCHAIN/etc \
                     --libexecdir=$ROOT/$TOOLCHAIN/lib \
                     --localstatedir=$ROOT/$TOOLCHAIN/var \
                     --enable-silent-rules \
                     --disable-dependency-tracking"

BOOTSTRAP_CONFIGURE_OPTS="--host=$TARGET_NAME \
                          --build=$HOST_NAME \
                          --prefix=/usr \
                          --bindir=/usr/bin \
                          --sbindir=/usr/sbin \
                          --sysconfdir=/etc \
                          --libexecdir=/usr/lib \
                          --localstatedir=/var \
                          --enable-silent-rules \
                          --disable-dependency-tracking"

INIT_CONFIGURE_OPTS="--host=$TARGET_NAME \
                     --build=$HOST_NAME \
                     --prefix=/usr \
                     --bindir=/usr/bin \
                     --sbindir=/usr/sbin \
                     --sysconfdir=/etc \
                     --libexecdir=/usr/lib \
                     --localstatedir=/var \
                     --enable-silent-rules \
                     --disable-dependency-tracking"

. $PKG_DIR/package.mk
for p in `eval echo "\\$PKG_DEPENDS_$UPTARGET"`; do
  scripts/build $p
done

printf "%${BUILD_INDENT}c ${boldyellow}BUILD${endcolor}    $PACKAGE_NAME ${boldwhite}($TARGET)${endcolor}\n" ' '
export BUILD_INDENT=$((${BUILD_INDENT:-1}+4))

is_virtual=$(echo $PKG_DIR | awk -F "/" '{print $(NF-1)}')
if [ ! "$is_virtual" = "virtual" ]; then
  mkdir -p $PKG_BUILD
  cd $PKG_BUILD
  rm -rf $INSTALL

  if [ "$PKG_AUTORECONF" = yes ]; then
    do_autoreconf
  fi

  if [ "$(type -t pre_build_$TARGET)" = "function" ]; then
    pre_build_$TARGET
  fi

  if [ -f "$CONFIGURE_SCRIPT" -o -f "$CMAKE_SCRIPT" ]; then
    mkdir -p $PKG_BUILD_SUBDIR
  fi

  if [ "$(type -t pre_configure_$TARGET)" = "function" ]; then
    pre_configure_$TARGET
  fi

  if [ -n "$PKG_BUILD_SUBDIR" -a -d "$PKG_BUILD_SUBDIR" ] ; then
    cd $PKG_BUILD_SUBDIR
  fi

  # configure
  if [ "$(type -t configure_$TARGET)" = "function" ]; then
    configure_$TARGET
  elif [ -f "$CONFIGURE_SCRIPT" ]; then
    case "$TARGET" in
      target)
        $CONFIGURE_SCRIPT $TARGET_CONFIGURE_OPTS $PKG_CONFIGURE_OPTS_TARGET
        ;;
      host)
        $CONFIGURE_SCRIPT $HOST_CONFIGURE_OPTS $PKG_CONFIGURE_OPTS_HOST
        ;;
      init)
        $CONFIGURE_SCRIPT $INIT_CONFIGURE_OPTS $PKG_CONFIGURE_OPTS_INIT
        ;;
      bootstrap)
        $CONFIGURE_SCRIPT $BOOTSTRAP_CONFIGURE_OPTS $PKG_CONFIGURE_OPTS_BOOTSTRAP
        ;;
    esac
  fi

  if [ "$(type -t pre_make_$TARGET)" = "function" ]; then
    pre_make_$TARGET
  fi
  if [ "$(type -t make_$TARGET)" = "function" ]; then
    make_$TARGET
  else
    eval make \$PKG_MAKE_OPTS_$UPTARGET
  fi
  if [ "$(type -t post_make_$TARGET)" = "function" ]; then
    post_make_$TARGET
  fi

  if [ "$(type -t pre_makeinstall_$TARGET)" = "function" ]; then
    pre_makeinstall_$TARGET
  fi
  if [ "$(type -t makeinstall_$TARGET)" = "function" ]; then
    makeinstall_$TARGET
  else
    case "$TARGET" in
      target)
        make -j1 install DESTDIR=$SYSROOT_PREFIX $PKG_MAKEINSTALL_OPTS_TARGET
        make install DESTDIR=$INSTALL $PKG_MAKEINSTALL_OPTS_TARGET
        ;;
      host)
        make install $PKG_MAKEINSTALL_OPTS_HOST
        ;;
      init)
        make install DESTDIR=$INSTALL $PKG_MAKEINSTALL_OPTS_INIT
        ;;
      bootstrap)
        make -j1 install DESTDIR=$SYSROOT_PREFIX $PKG_MAKEINSTALL_OPTS_BOOTSTRAP
        ;;
    esac
  fi
fi  # ! "$is_virtual" = "virtual"

if [ "$(type -t post_makeinstall_$TARGET)" = "function" ]; then
  post_makeinstall_$TARGET
fi

# cleanup
if [ "$TARGET" = "target" -o "$TARGET" = "init" ]; then
  if [ -d "$INSTALL" ] ; then
    for i in $INSTALL $INSTALL/usr ; do
      rm -rf $i/include
      rm -rf $i/lib/cmake
      rm -rf $i/lib/pkgconfig
      rm -rf $i/man
      rm -rf $i/share/aclocal
      rm -rf $i/share/bash-completion
      rm -rf $i/share/doc
      rm -rf $i/share/gtk-doc
      rm -rf $i/share/info
      rm -rf $i/share/locale
      rm -rf $i/share/man
      rm -rf $i/share/pkgconfig
      rm -rf $i/share/zsh
      rm -rf $i/var
      find $INSTALL -name "*.orig" -exec rm -f {} \; 2>/dev/null || :
      find $INSTALL -name "*.la" -exec rm -f {} \; 2>/dev/null || :
      find $INSTALL -name "*.a" -exec rm -f {} \; 2>/dev/null || :
      find $INSTALL -name "*.o" -exec rm -f {} \; 2>/dev/null || :
      find $INSTALL -name "*.so*T" -exec rm -f {} \; 2>/dev/null || :
      find $INSTALL -name "addon.xml.in" -exec rm -f {} \; 2>/dev/null || :
      find $INSTALL -name "Makefile.in" -exec rm -f {} \; 2>/dev/null || :
      find $INSTALL -type d -exec rmdir -p {} \; 2>/dev/null || :
    done

    if [ ! "$DEBUG" = yes ]; then
      debug_strip $INSTALL
    fi
    cleanup_rpath $INSTALL
  fi
fi
cd $ROOT

for i in `find $SYSROOT_PREFIX/usr/lib/ -name "*.la" 2>/dev/null`; do \
  sed -i "s:\(['= ]\)/usr:\\1$SYSROOT_PREFIX/usr:g" $i; \
done

save_stamp
