#!/bin/bash

################################################################################
#      This file is part of OpenELEC - http://www.openelec.tv
#      Copyright (C) 2009-2016 Stephan Raue (stephan@openelec.tv)
#
#  OpenELEC is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 2 of the License, or
#  (at your option) any later version.
#
#  OpenELEC is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with OpenELEC.  If not, see <http://www.gnu.org/licenses/>.
################################################################################

. config/options $1

if [ -z "$1" ]; then
  echo "usage: $0 package_name"
  exit 1
fi

check_package $1

$SCRIPTS/get $1

STAMP=$PKG_BUILD/.openelec-unpack

mkdir -p $BUILD

[ ! -d "$SOURCES/$1" -a ! -d "$PKG_DIR/sources" ] && exit 0

STAMP_DEPENDS="$PKG_DIR $PKG_NEED_UNPACK $PROJECT_DIR/$PROJECT/patches/$PKG_NAME"

for i in $BUILD/$1-*; do
  if [ -d $i -a -f "$i/.openelec-unpack" ] ; then
    . "$i/.openelec-unpack"
    if [ "$STAMP_PKG_NAME" = "$1" ]; then
      PKG_DEEPMD5=$(find $STAMP_DEPENDS -exec md5sum {} \; 2>/dev/null | sort | md5sum | cut -d" " -f1)
      if [ ! "$PKG_DEEPMD5" = "$STAMP_PKG_DEEPMD5" ] ; then
        $SCRIPTS/clean $1
      fi
    fi
  fi
done

[ -f "$STAMP" ] && exit 0

printf "%${BUILD_INDENT}c ${boldcyan}UNPACK${endcolor}   $1\n" ' '
export BUILD_INDENT=$((${BUILD_INDENT:-1}+$BUILD_INDENT_SIZE))

# unset functions
unset -f unpack
unset -f pre_patch
unset -f post_patch

. $PKG_DIR/package.mk

if [ "$(type -t unpack)" = "function" ]; then
  unpack
else
  if [ -n "$PKG_URL" ]; then
    SOURCE_NAME="`basename $PKG_URL`"
  elif [ -n "$PKG_FETCH" ] ; then
    SOURCE_NAME="$PKG_NAME-$PKG_VERSION.tar.gz"
  fi
  if [ -z "$SOURCE_NAME" ] ; then
    exit 0
  fi

  PACKAGE="$SOURCES/$1/$SOURCE_NAME"
  case $PACKAGE in
    *.tar|*.tar.bz2|*.tbz|*.tar.gz|*.tgz|*.tar.xz|*.txz)
      tar xf $PACKAGE -C $BUILD
      ;;
    *.zip)
      mkdir -p $BUILD/$1
      unzip -q $PACKAGE -d $BUILD/$1
      ;;
  esac
fi

if [ -n "$PKG_SOURCE_DIR" ]; then
  mv $BUILD/$PKG_SOURCE_DIR $BUILD/$PKG_NAME-$PKG_VERSION
fi

if [ "$(type -t pre_patch)" = "function" ]; then
  pre_patch
fi

for i in $PKG_DIR/patches/*.patch \
         $PKG_DIR/patches/$PKG_VERSION/*.patch \
         $PROJECT_DIR/$PROJECT/patches/$PKG_NAME/*.patch; do
  if [ -f "$i" ]; then
    printf "%${BUILD_INDENT}c ${boldgreen}APPLY PATCH${endcolor}    $i\n" ' '
    if [ -n "$(grep -E '^GIT binary patch$' $i)" ]; then
      cat $i | git apply --directory=`echo "$PKG_BUILD" | cut -f1 -d\ ` -p1 --verbose --whitespace=nowarn
    else
      cat $i | patch -d `echo "$PKG_BUILD" | cut -f1 -d\ ` -p1
    fi
  fi
done

if [ "$(type -t post_patch)" = "function" ]; then
  post_patch
fi

for config in `find $BUILD/$1* -name config.guess | sed 's/config.guess//'`; do
  printf "%${BUILD_INDENT}c ${boldyellow}FIXCONFIG${endcolor}   $config\n" ' '

  [ -f "$config/config.guess" ] && cp -f $SCRIPTS/configtools/config.guess $config
  [ -f "$config/config.sub" ] && cp -f $SCRIPTS/configtools/config.sub $config
  [ -f "$config/configure.guess" ] && cp -f $SCRIPTS/configtools/config.guess $config/configure.guess
  [ -f "$config/configure.sub" ] && cp -f $SCRIPTS/configtools/config.sub $config/configure.sub
done

rm -f $STAMPS/$1/build_*

PKG_DEEPMD5=$(find $STAMP_DEPENDS -exec md5sum {} \; 2>/dev/null | sort | md5sum | cut -d" " -f1)
for i in PKG_NAME PKG_DEEPMD5; do
  eval val=\$$i
  echo "STAMP_$i=\"$val\"" >> $STAMP
done
